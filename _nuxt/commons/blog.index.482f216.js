(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{275:function(module,exports){eval('\nmodule.exports = { \n      attributes: {"title":"Mi primer post","year":2020,"month":6,"day":5,"hour":"22:00","excerpt":"Este post va a ser algo corto y hablar√© del porqu√© de esta p√°gina, principalmente son 3 motivos, compartir conocimiento, dar a conocer un poco sobre m√≠ y sobre lo que he hecho y por gusto","picture":"/images/blog/first_post/header.png","picture_attribution":"Andy Holmes"},\n    \n      html: "<p>Este post va a ser algo corto y hablar√© del porqu√© de esta p√°gina, principalmente son 3 motivos:</p>\\n<ul>\\n<li>Compartir conocimiento</li>\\n<li>Dar a conocer un poco sobre m√≠ y sobre lo que he hecho</li>\\n<li>Por gusto üòÅ</li>\\n</ul>\\n<p>Respecto al primer punto, hay muchas cosas que creo que es m√°s f√°cil explicar a trav√©s de un post que con palabras o por mensajes,\\npues hay m√°s posibilidades de explayarse y de entrar en m√°s detalles respecto a ciertas cosas.</p>\\n<p>En el segundo punto, hay proyectos que he hecho y creo que merece exponerlos, sin embargo, por distintas cuestiones,\\nestos no son todos (hay algunos que no puedo mostrar por distintas cuestiones).</p>\\n<p>Y el tercer punto, ya ten√≠a en mente hacer un blog desde hace varios meses, sin embargo, mi primer intento no me convenci√≥ y\\ntermine dej√°ndolo, pero este ya se va a quedar üòé</p>\\n<p>Espero que el contenido de este sitio sea de su agrado y, sobre todo, si pueden retroalimentar el contenido, ¬°se los agradecer√©!</p>\\n<pre class=\\"language-cpp\\"><code class=\\"language-cpp\\"><span class=\\"token macro property\\">#<span class=\\"token directive property\\">include</span> <span class=\\"token string property\\">&lt;iostream></span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token operator\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Let\'s begin!\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre>\\n",\n    \n      meta: {"resourcePath":"/home/runner/work/alan-blog/alan-blog/content/blog/2020-06-05-primer_post.md"},\n     }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb250ZW50L2Jsb2cvMjAyMC0wNi0wNS1wcmltZXJfcG9zdC5tZD83ODJlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxrQjtBQUNBLG1CQUFtQixpV0FBaVc7O0FBRXBYLHVyQ0FBdXJDLHFPQUFxTyxnR0FBZ0csSUFBSSwrRkFBK0YsNENBQTRDOztBQUUzb0QsYUFBYSw4RkFBOEY7QUFDM0ciLCJmaWxlIjoiMjc1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5tb2R1bGUuZXhwb3J0cyA9IHsgXG4gICAgICBhdHRyaWJ1dGVzOiB7XCJ0aXRsZVwiOlwiTWkgcHJpbWVyIHBvc3RcIixcInllYXJcIjoyMDIwLFwibW9udGhcIjo2LFwiZGF5XCI6NSxcImhvdXJcIjpcIjIyOjAwXCIsXCJleGNlcnB0XCI6XCJFc3RlIHBvc3QgdmEgYSBzZXIgYWxnbyBjb3J0byB5IGhhYmxhcsOpIGRlbCBwb3JxdcOpIGRlIGVzdGEgcMOhZ2luYSwgcHJpbmNpcGFsbWVudGUgc29uIDMgbW90aXZvcywgY29tcGFydGlyIGNvbm9jaW1pZW50bywgZGFyIGEgY29ub2NlciB1biBwb2NvIHNvYnJlIG3DrSB5IHNvYnJlIGxvIHF1ZSBoZSBoZWNobyB5IHBvciBndXN0b1wiLFwicGljdHVyZVwiOlwiL2ltYWdlcy9ibG9nL2ZpcnN0X3Bvc3QvaGVhZGVyLnBuZ1wiLFwicGljdHVyZV9hdHRyaWJ1dGlvblwiOlwiQW5keSBIb2xtZXNcIn0sXG4gICAgXG4gICAgICBodG1sOiBcIjxwPkVzdGUgcG9zdCB2YSBhIHNlciBhbGdvIGNvcnRvIHkgaGFibGFyw6kgZGVsIHBvcnF1w6kgZGUgZXN0YSBww6FnaW5hLCBwcmluY2lwYWxtZW50ZSBzb24gMyBtb3Rpdm9zOjwvcD5cXG48dWw+XFxuPGxpPkNvbXBhcnRpciBjb25vY2ltaWVudG88L2xpPlxcbjxsaT5EYXIgYSBjb25vY2VyIHVuIHBvY28gc29icmUgbcOtIHkgc29icmUgbG8gcXVlIGhlIGhlY2hvPC9saT5cXG48bGk+UG9yIGd1c3RvIPCfmIE8L2xpPlxcbjwvdWw+XFxuPHA+UmVzcGVjdG8gYWwgcHJpbWVyIHB1bnRvLCBoYXkgbXVjaGFzIGNvc2FzIHF1ZSBjcmVvIHF1ZSBlcyBtw6FzIGbDoWNpbCBleHBsaWNhciBhIHRyYXbDqXMgZGUgdW4gcG9zdCBxdWUgY29uIHBhbGFicmFzIG8gcG9yIG1lbnNhamVzLFxcbnB1ZXMgaGF5IG3DoXMgcG9zaWJpbGlkYWRlcyBkZSBleHBsYXlhcnNlIHkgZGUgZW50cmFyIGVuIG3DoXMgZGV0YWxsZXMgcmVzcGVjdG8gYSBjaWVydGFzIGNvc2FzLjwvcD5cXG48cD5FbiBlbCBzZWd1bmRvIHB1bnRvLCBoYXkgcHJveWVjdG9zIHF1ZSBoZSBoZWNobyB5IGNyZW8gcXVlIG1lcmVjZSBleHBvbmVybG9zLCBzaW4gZW1iYXJnbywgcG9yIGRpc3RpbnRhcyBjdWVzdGlvbmVzLFxcbmVzdG9zIG5vIHNvbiB0b2RvcyAoaGF5IGFsZ3Vub3MgcXVlIG5vIHB1ZWRvIG1vc3RyYXIgcG9yIGRpc3RpbnRhcyBjdWVzdGlvbmVzKS48L3A+XFxuPHA+WSBlbCB0ZXJjZXIgcHVudG8sIHlhIHRlbsOtYSBlbiBtZW50ZSBoYWNlciB1biBibG9nIGRlc2RlIGhhY2UgdmFyaW9zIG1lc2VzLCBzaW4gZW1iYXJnbywgbWkgcHJpbWVyIGludGVudG8gbm8gbWUgY29udmVuY2nDsyB5XFxudGVybWluZSBkZWrDoW5kb2xvLCBwZXJvIGVzdGUgeWEgc2UgdmEgYSBxdWVkYXIg8J+YjjwvcD5cXG48cD5Fc3Blcm8gcXVlIGVsIGNvbnRlbmlkbyBkZSBlc3RlIHNpdGlvIHNlYSBkZSBzdSBhZ3JhZG8geSwgc29icmUgdG9kbywgc2kgcHVlZGVuIHJldHJvYWxpbWVudGFyIGVsIGNvbnRlbmlkbywgwqFzZSBsb3MgYWdyYWRlY2Vyw6khPC9wPlxcbjxwcmUgY2xhc3M9XFxcImxhbmd1YWdlLWNwcFxcXCI+PGNvZGUgY2xhc3M9XFxcImxhbmd1YWdlLWNwcFxcXCI+PHNwYW4gY2xhc3M9XFxcInRva2VuIG1hY3JvIHByb3BlcnR5XFxcIj4jPHNwYW4gY2xhc3M9XFxcInRva2VuIGRpcmVjdGl2ZSBwcm9wZXJ0eVxcXCI+aW5jbHVkZTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIHN0cmluZyBwcm9wZXJ0eVxcXCI+Jmx0O2lvc3RyZWFtPjwvc3Bhbj48L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmludDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGZ1bmN0aW9uXFxcIj5tYWluPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj57PC9zcGFuPlxcbiAgICBzdGQ8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPjo6PC9zcGFuPmNvdXQgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4mbHQ7Jmx0Ozwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIHN0cmluZ1xcXCI+XFxcIkxldCdzIGJlZ2luIVxcXCI8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+fTwvc3Bhbj5cXG48L2NvZGU+PC9wcmU+XFxuXCIsXG4gICAgXG4gICAgICBtZXRhOiB7XCJyZXNvdXJjZVBhdGhcIjpcIi9ob21lL3J1bm5lci93b3JrL2FsYW4tYmxvZy9hbGFuLWJsb2cvY29udGVudC9ibG9nLzIwMjAtMDYtMDUtcHJpbWVyX3Bvc3QubWRcIn0sXG4gICAgIH0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///275\n')},276:function(module,exports){eval('\nmodule.exports = { \n      attributes: {"title":"Iniciando con Rust","year":2020,"month":6,"day":19,"hour":"00:58","excerpt":"Rust es un lenguaje de programaci√≥n que ha estado creciendo en popularidad y con buenas razones, he decidido probarlo y te comparto un breve res√∫men de este lenguaje y algunas de mis opiniones respecto a este lenguaje","picture":"/images/blog/rust_getting_started/Rust.png"},\n    \n      html: "<p>Un lenguaje que ha estado tomando much√≠sima fuerza es <a href=\\"https://rust-lang.org\\">Rust</a> y esto lleva varios a√±os,\\nbasta con ver la developer survey de <a href=\\"https://insights.stackoverflow.com/survey/2019#technology-_-most-loved-dreaded-and-wanted-languages\\">Stack Overflow</a> del 2019 para ver que es un lenguaje muy querido por los desarrolladores.</p>\\n<p>Ahora bien, ¬øqu√© tiene de especial este lenguaje de programaci√≥n?, ¬°pues mucho!, Rust est√° dise√±ado para ser un lenguaje de programaci√≥n de sistemas\\n(en la misma categor√≠a que C, C++, D, Go), pero tiene algunas caracter√≠sticas muy interesantes:</p>\\n<ul>\\n<li>Est√° dise√±ado para ser seguro</li>\\n<li>Est√° dise√±ado para ser concurrente</li>\\n<li>No tiene recolector de basura</li>\\n</ul>\\n<p>Y, desde mi punto de vista, es un lenguaje que ha venido para quedarse y creo que la etiqueta de &quot;moderno&quot; le queda muy bien :)</p>\\n<h1 id=\\"contenido\\"><a id=\\"user-content-contenido\\" class=\\"anchor\\" href=\\"#contenido\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Contenido</h1>\\n<ol>\\n<li><a href=\\"#history\\">Breve historia del lenguaje</a> üìñ</li>\\n<li><a href=\\"#install\\">Instalando Rust</a> üíΩ</li>\\n<li><a href=\\"#hello-world\\">¬°Hola mundo!</a> üåé</li>\\n<li><a href=\\"#thoughts\\">Mis opiniones</a> ü§î</li>\\n</ol>\\n<br>\\n<h1 id=\\"history\\">Breve historia del lenguaje</h1>\\n<p>Rust inicio como un proyecto personal de Graydon Hoare y se mantuvo de esta forma durante tres a√±os, no fue sino hasta 2009 que Mozilla se iteres√≥ en el proyecto\\ny se meti√≥ al desarrollo de este proyecto.</p>\\n<p>En 2010 Mozilla dio a conocer este proyecto al p√∫blico y este mismo a√±o se empez√≥ a implementar el compilador de Rust en Rust, anteriormente estaba escrito en OCaml y\\nfue hasta 2011 que por fin <code>rustc</code> pudo compilarse a si mismo :)</p>\\n<p>La primera versi√≥n alfa de Rust sali√≥ en 2012 y la primera versi√≥n estable sali√≥ hasta 2015 üéâ</p>\\n<p>La versi√≥n m√°s nueva a d√≠a de hoy es la 1.44.0</p>\\n<br>\\n<h1 id=\\"install\\">Instalando Rust</h1>\\n<p>El proceso de instalaci√≥n de Rust es muy sencillo, basta con descargar <a href=\\"https://www.rust-lang.org/tools/install\\">rustup</a> de la p√°gina oficial,\\nen el caso de Windows (que es el sistema operativo que utilizo principalmente), abrir√° una ventana y tendr√° el siguiente contenido:</p>\\n<pre class=\\"language-cmd\\"><code class=\\"language-cmd\\">Current installation options:\\n\\n\\n   default host triple: x86_64-pc-windows-msvc\\n     default toolchain: stable\\n               profile: default\\n  modify PATH variable: yes\\n\\n1) Proceed with installation (default)\\n2) Customize installation\\n3) Cancel installation\\n</code></pre>\\n<p>Podemos personalizar varias cosas, una de las principales es el host triple, el host triple sirve para indicar las siguientes cosas:</p>\\n<ul>\\n<li>Arquitectura üèõ</li>\\n<li>Sistema operativo üíø</li>\\n<li>Otras cuestiones, como utilizar msvc o gnu en el caso de Windows o utilizar glibc o musl en Linux üîß\\nY para instalarlo basta con escribir <code>1</code> y presionar <code>ENTER</code></li>\\n</ul>\\n<br>\\n<p>Y si queremos actualizar Rust, el proceso es muy sencillo, pues basta con ejecutar el siguiente comando: üëâ <code>rustup update</code></p>\\n<br>\\n<h1 id=\\"hello-world\\">¬°Hola mundo!</h1>\\n<p>Escribir un hola mundo en Rust es muy sencillo, pues contamos con la herramienta <em>cargo</em>, cargo es el build system y gestor de paquetes de Rust,\\ncon el podemos gestionar dependencias y compilar nuestro c√≥digo.</p>\\n<p>Para crear un proyecto con cargo, basta con ejecutar el siguiente comando:</p>\\n<pre class=\\"language-powershell\\"><code class=\\"language-powershell\\">cargo new <span class=\\"token namespace\\">[nombre del proyecto]</span>\\n</code></pre>\\n<p>Esto crear√° una carpeta con el nombre del proyecto, vayamos creando uno llamado &quot;hola_mundo&quot;:</p>\\n<pre class=\\"language-powershell\\"><code class=\\"language-powershell\\"><span class=\\"token function\\">PS</span> C:\\\\rust> cargo new hello_world\\nCreated binary <span class=\\"token punctuation\\">(</span>application<span class=\\"token punctuation\\">)</span> `hola_mundo` package\\n<span class=\\"token function\\">PS</span> C:\\\\rust> cd hello_world\\n<span class=\\"token function\\">PS</span> C:\\\\rust\\\\hello_world>\\n</code></pre>\\n<p>Cargo habr√° creado los siguientes archivos:</p>\\n<ul>\\n<li>.gitignore</li>\\n<li>Cargo.toml üëà aqu√≠ es donde van las dependencias y algunos datos del proyecto</li>\\n<li>src/main.rs üëà nuestro c√≥digo</li>\\n</ul>\\n<p>Analicemos el archivo <code>Cargo.toml</code> y <code>main.rs</code></p>\\n<p>Cargo.toml</p>\\n<pre class=\\"language-toml\\"><code class=\\"language-toml\\"><span class=\\"token punctuation\\">[</span><span class=\\"token table class-name\\">package</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token key property\\">name</span> <span class=\\"token punctuation\\">=</span> <span class=\\"token string\\">\\"hola_mundo\\"</span>\\n<span class=\\"token key property\\">version</span> <span class=\\"token punctuation\\">=</span> <span class=\\"token string\\">\\"0.1.0\\"</span>\\n<span class=\\"token key property\\">authors</span> <span class=\\"token punctuation\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"Alan Ram√≠rez Herrera &lt;alan5142@hotmail.com>\\"</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token key property\\">edition</span> <span class=\\"token punctuation\\">=</span> <span class=\\"token string\\">\\"2018\\"</span>\\n\\n<span class=\\"token comment\\"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span>\\n\\n<span class=\\"token punctuation\\">[</span><span class=\\"token table class-name\\">dependencies</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token comment\\"># Aqu√≠ van nuestras dependencias :)</span>\\n</code></pre>\\n<p>Es importante mencionar que estas <em>NO</em> son todas las opciones, Rust cuenta con documentaci√≥n <a href=\\"https://doc.rust-lang.org/cargo/reference/manifest.html\\">para esto</a></p>\\n<ul>\\n<li><code>[package]</code> indica que inicia un paquete (proyecto)\\n<ul>\\n<li><code>name</code> es el nombre del paquete</li>\\n<li><code>verison</code> es la versi√≥n del paquete</li>\\n<li><code>authors</code> es una lista de las personas que son consideradas autores del proyecto</li>\\n<li><code>edition</code> esta es importante, indica la edici√≥n de Rust que se utilizar√°, si no la especificamos por defecto utilizar√° 2015 (la primera versi√≥n estable)</li>\\n</ul>\\n</li>\\n<li><code>[dependencies]</code> contiene todas las dependencias que queramos utilizar en nuestro proyecto, podemos especificar de donde descargarlo (por ejemplo, un repositorio en GitHub) o utilizar <a href=\\"https://crates.io/\\">crates.io</a></li>\\n</ul>\\n<p>Para agregar dependencias basta con listarla debajo de <code>[dependencies]</code>, por ejemplo, si queremos instalar gfx (una API gr√°fica), basta con hacer esto:</p>\\n<pre class=\\"language-toml\\"><code class=\\"language-toml\\"><span class=\\"token punctuation\\">[</span><span class=\\"token table class-name\\">dependencies</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token key property\\">gfx</span> <span class=\\"token punctuation\\">=</span> <span class=\\"token string\\">\\"0.18.2\\"</span> <span class=\\"token comment\\"># Esta es la versi√≥n</span>\\n</code></pre>\\n<p>¬°Eso es todo!, compilamos nuestro programa y <code>cargo</code> buscar√° las nuevas dependencias y las instalar√°, ¬øno es genial?</p>\\n<p>Ahora si, ¬øy c√≥mo se ve un hola mundo?</p>\\n<pre class=\\"language-rust\\"><code class=\\"language-rust\\"><span class=\\"token keyword\\">fn</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Hello world\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre>\\n<p>Si queremos compilarlo utilizamos <code>cargo build</code> en la ra√≠z del proyecto y si queremos ejecutarlo, utilizamos <code>cargo run</code>;\\nal compilarlo se crea una carpeta llamada <em>target</em>, ah√≠ se encuentran los resultados de haber compilado nuestro programa</p>\\n<p>De aqu√≠ podemos observar var√≠as cosas:</p>\\n<ul>\\n<li>Las funciones inician con la palabra reservada <code>fn</code></li>\\n<li>Al igual que en C++, la funci√≥n principal se llama <code>main</code></li>\\n<li>Se utilizan llaves para delimitar bloques</li>\\n<li>Para mostrar en pantalla, utilizamos <code>println!</code></li>\\n</ul>\\n<p>Rust tiene algunas otras diferencias comparado con otros lenguajes, pero son f√°ciles de entender, veamos otro ejemplo.</p>\\n<pre class=\\"language-rust\\"><code class=\\"language-rust\\"><span class=\\"token keyword\\">fn</span> <span class=\\"token function\\">sentido_de_la_vida</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">-></span> i32 <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token number\\">42</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">fn</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> num <span class=\\"token operator\\">=</span> <span class=\\"token function\\">sentido_de_la_vida</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> num <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">42</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Oops, hay algo mal :(\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">println!</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Todo esta perfecto\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre>\\n<p>Efectuamos <code>cargo run</code> y mostrar√° lo siguiente (puedes verlo <a href=\\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=206bf3a15a779ef8b8596d587a48179c\\">aqu√≠</a>üëà)</p>\\n<pre class=\\"language-powershell\\"><code class=\\"language-powershell\\">Todo esta perfecto\\n</code></pre>\\n<h1 id=\\"thoughts\\">Mis opiniones</h1>\\n<h2 id=\\"lo-bueno\\"><a id=\\"user-content-lo-bueno\\" class=\\"anchor\\" href=\\"#lo-bueno\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Lo bueno</h2>\\n<p>¬°Rust es un lenguaje m√°gnifico!, y no solo eso, viniendo de C++ la adopci√≥n ha sido muy sencilla y creo que esto es un punto bastante fuerte del lenguaje,\\nquiz√° llega a ser un poco molesto la cantidad de veces que <code>rustc</code> no te permite compilar pero lo hace con mucha raz√≥n: el compilador de rust\\nes uno de sus puntos m√°s fuertes, los mensajes son muy claros, te indica d√≥nde puede estar el error y posiblemente como solucionarlo y muchas\\nveces te impide realizar acciones que puedan suponer un riesgo (como utilizar una variable que ya ha sido movida), simplemente es una maravilla üòé.</p>\\n<p>Adem√°s, hay algunas cosas que me gustar√≠a que C++ tuviera:</p>\\n<ul>\\n<li>Que los compiladores sean m√°s amigables con los errores (especialmente con los errores del <em>linker</em> y con las templates)</li>\\n<li>Un g√©stor de paquetes (aunque lentamente la situaci√≥n est√° mejorando con herramientas como <a href=\\"https://github.com/Microsoft/vcpkg\\">vcpkg</a> y <a href=\\"https://conan.io/\\">conan</a>)</li>\\n<li>Los traits :( (aunque los <em>Concepts</em> de C++20 pueden ayudar en esto)</li>\\n<li>¬°Los tiempos de compilaci√≥n!, cuando he utilizado <em>Boost</em>, espec√≠ficamente Asio y Beast, los tiempos de compilaci√≥n son exageradamente grandes (principalmente por culpa de las templates)</li>\\n</ul>\\n<h2 id=\\"lo-malo\\"><a id=\\"user-content-lo-malo\\" class=\\"anchor\\" href=\\"#lo-malo\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Lo malo</h2>\\n<p>Creo que es un lenguaje a√∫n muy nuevo, falta que m√°s proyectos lo utilicen de manera seria, pero estoy seguro de que esa situaci√≥n cambiar√° en un futuro para bien</p>\\n<h2 id=\\"sin-clasificar\\"><a id=\\"user-content-sin-clasificar\\" class=\\"anchor\\" href=\\"#sin-clasificar\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Sin clasificar</h2>\\n<p>Creo que el lenguaje llego para quedarse, sin embargo, no creo que sustituya a C ni sea un <em>C++ killer</em>, creo que cada lenguaje tiene su espacio.</p>\\n<p>Y finalmente, creo que todos deber√≠an probar Rust, pues creo que es un lenguaje moderno que demuestra que no se necesita un recolector de basura para\\nser seguro y, creo que ha hecho much√≠simos aciertos en cuanto al dise√±o de este.</p>\\n<br>\\n<br>\\nFinalmente, me gustar√≠a saber, ¬øustedes ya han probado Rust?, ¬øqu√© opinan?, deja un comentario o env√≠ame un mensaje.\\n<p>¬°Hasta la pr√≥xima!</p>\\n",\n    \n      meta: {"resourcePath":"/home/runner/work/alan-blog/alan-blog/content/blog/2020-06-19-rust_getting_started.md"},\n     }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///276\n')},277:function(module,exports){eval('\nmodule.exports = { \n      attributes: {"title":"Programaci√≥n orientada a objetos en C","year":2020,"month":7,"day":2,"hour":"00:25","excerpt":"¬øQu√©?, ¬øprogramaci√≥n orientada a objetos en C?, ¬øes esto posible?, la respuesta es ¬°s√≠, si es posible!, y no es tan complicado como suena, pero requiere de trabajo manual üí™, entonces, repasemos lo que es la programaci√≥n orientada a objetos","picture":"/images/blog/oop_c/header.png"},\n    \n      html: "<p>El fin de este art√≠culo es informativo, probablemente <em>no</em> deber√≠as hacer esto, es tardado y en\\nC es mejor hacer las cosas de otra forma</p>\\n<p>¬øQu√©?, ¬øprogramaci√≥n orientada a objetos en C?, ¬øes esto posible?, la respuesta es ¬°s√≠, si es posible!, y no es tan complicado como suena, pero requiere de trabajo manual üí™, entonces, repasemos lo que es la programaci√≥n orientada a objetos</p>\\n<blockquote>\\n<p>Es un paradigma de programaci√≥n basado en el concepto de &quot;objetos&quot;, que contienen datos en la forma de campos (conocidos como atributos o propiedades) y c√≥digo\\nen la forma de procedimientos (llamados m√©todos)</p>\\n</blockquote>\\n<p style=\\"font-size: 0.7em; text-align: right\\">Tomado de <a href=\\"https://en.wikipedia.org/wiki/Object-oriented_programming#cite_note-1\\">Wikipedia</a></p>\\n<p>Ok, pero ¬øc√≥mo uso la OOP en C?</p>\\n<p>Antes de empezar, hay muchas formas de hacer esto, en general todas comparten ciertas similitudes, por lo que esta solo es una forma de hacerlo</p>\\n<p>Entonces, ¬°comencemos!</p>\\n<h1 id=\\"clases\\"><a id=\\"user-content-clases\\" class=\\"anchor\\" href=\\"#clases\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Clases</h1>\\n<p>¬øQu√© ser√≠a de un lenguaje orientado a objetos si no tuviera clases?, por eso es lo primero que debemos pensar en implementar.\\nDe hecho, no es dif√≠cil implementar esto.</p>\\n<p>Primero, veamos c√≥mo se crea una clase en C++:</p>\\n<pre class=\\"language-cpp\\"><code class=\\"language-cpp\\"><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Clase</span> <span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">public</span><span class=\\"token operator\\">|</span><span class=\\"token keyword\\">protected</span><span class=\\"token operator\\">|</span><span class=\\"token keyword\\">private</span><span class=\\"token punctuation\\">]</span> Clase1<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">public</span><span class=\\"token operator\\">|</span><span class=\\"token keyword\\">protected</span><span class=\\"token operator\\">|</span><span class=\\"token keyword\\">private</span><span class=\\"token punctuation\\">]</span> Clase2<span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">public</span><span class=\\"token operator\\">|</span><span class=\\"token keyword\\">protected</span><span class=\\"token operator\\">|</span><span class=\\"token keyword\\">private</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre>\\n<blockquote>\\n<p>class y struct en C++ son lo mismo, solo difieren por el tipo de acceso por defecto siendo public en struct y private en class</p>\\n</blockquote>\\n<p>En C solo tenemos las <code>struct</code>, pero con ellas podemos hacer todo, excepto propiedades privadas y protegidas, ¬øo no?, ¬°si podemos tener propiedades privadas!,\\nhay muchas formas de hacer esto, algunas que no son tan privadas (por ejemplo, tener un prefijo para indicar que son privadas) o utilizar una estructura que implemente\\neso y solo pueda ser accedida desde un lugar privado üôÄ.</p>\\n<p>Para esto se requiere de una estructura que sirva para almacenar las variables privadas y que no pueda ser utilizada en el contexto <em>p√∫blico</em>,\\npara ello vamos a recurrir a utilizar una <em>forward declaration</em> de esta estructura.</p>\\n<blockquote>\\n<p><em>Forward declaration</em> se refiere a declarar un identificador (tipo, variable, constante, funci√≥n) a la que todav√≠a no se le ha dado una definici√≥n completa</p>\\n</blockquote>\\n<p>Entonces, imaginemos que nuestra clase se llama <code>MyClass</code>, entonces podr√≠amos llamar a nuestra implementaci√≥n de las variables privadas\\n<code>MyClassPrivate</code>, por lo que quedar√≠a de esta forma:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token comment\\">// .h</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClassPrivate</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClass</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// El compilador necesita saber el tama√±o, en este caso el tama√±o de un apuntador</span>\\n    <span class=\\"token comment\\">// Si no es un apuntador, el compilador no sabe el tama√±o y pues no nos dejar√° compilar</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClassPrivate</span> <span class=\\"token operator\\">*</span>private<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// .c</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClassPrivate</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> c<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> MyClassPrivate<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// obj->private solo puede ser accedido en este archivo* (hay maneras de saltarse esto, pero no las mencionar√© aqu√≠)</span>\\n</code></pre>\\n<h1 id=\\"constructores-y-destructores\\"><a id=\\"user-content-constructores-y-destructores\\" class=\\"anchor\\" href=\\"#constructores-y-destructores\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Constructores y destructores</h1>\\n<blockquote>\\n<p>Un constructor es un m√©todo que se encarga de inicializar un objeto de cierta clase.</p>\\n</blockquote>\\n<p>Los constructores son una de las partes m√°s importantes, pues permiten la inicializaci√≥n de los objetos a un estado\\nen el que sea conveniente para el programa, por ejemplo, imaginemos una clase llamada &quot;TcpConnection&quot; y un constructor que tome\\nuna direcci√≥n ip y un puerto para conectarse, aqu√≠ se puede establecer esa parte de inicializar la conexi√≥n a un estado en el\\nque realmente est√© conectado a &quot;ip:puerto&quot;.</p>\\n<p>En C++ contamos con distintos tipos de ctor, todos tienen la tarea de inicializar un objeto de una clase espec√≠fica.</p>\\n<ul>\\n<li><code>Class::Class()</code> -&gt; constructor vac√≠o</li>\\n<li><code>Class:Class(const Class &amp;obj)</code> -&gt; constructor copia</li>\\n<li><code>Class::Class(Class &amp;&amp;obj)</code> -&gt; constructor de movimiento</li>\\n<li><code>Class::Class(params...)</code> -&gt; constructor con par√°metros</li>\\n</ul>\\n<p>Dicho esto, ¬øc√≥mo utilizamos constructores en C?</p>\\n<p>Puesto que en C solo tenemos funciones, tenemos que recurrir a ellas para inicializar nuestras instancias,\\nuna forma de hacer esto es de la siguiente manera:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Hey</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> Hey<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Hey_ctor</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// y para usarla</span>\\nHey hey<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token function\\">Hey_ctor</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre>\\n<p>Sencillo, ¬øno?, los dem√°s constructores pueden ser implementador de la misma manera, solo basta con mandarle los par√°metros que necesitemos,\\npor ejemplo, un constructor que reciba un int ser√≠a as√≠:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token comment\\">// puesto que en C no existe la sobrecarga de funciones, podemos extender el nombre del ctor con los parametros que reciba</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Hey_ctor_i</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> param<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre>\\n<p>Oye, ¬øy un destructor? üí•</p>\\n<p>¬°Pues de la misma manera!, implementamos una funci√≥n que se encargue de realizar esta funci√≥n, veamos el siguiente ejemplo:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Hey_dtor</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// y para usarlo</span>\\nHey hey<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token function\\">Hey_ctor</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>hey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// usamos el objeto</span>\\n<span class=\\"token function\\">Hey_dtor</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>hey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// y llamamos al dtor</span>\\n</code></pre>\\n<p>¬°Veamos un ejemplo donde apliquemos clases, ctors y dtor!</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token comment\\">// Class.h</span>\\n<span class=\\"token comment\\">// Forward declare de la estructura para los campos privados</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClassPrivate</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// Creamos la clase</span>\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClass</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// variables privadas</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClassPrivate</span> <span class=\\"token operator\\">*</span>private_members<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// variables publicas</span>\\n    <span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> MyClass<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// Ctor</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">MyClass_ctor</span><span class=\\"token punctuation\\">(</span>MyClass <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> c<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// M√©todo get_c</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">MyClass_get_c</span><span class=\\"token punctuation\\">(</span>MyClass <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// dtor</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">MyClass_dtor</span><span class=\\"token punctuation\\">(</span>MyClass <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// Class.c</span>\\n<span class=\\"token macro property\\">#<span class=\\"token directive property\\">include</span> <span class=\\"token string property\\">\\"class.H\\"</span></span>\\n<span class=\\"token macro property\\">#<span class=\\"token directive property\\">include</span> <span class=\\"token string property\\">&lt;stdlib.h></span></span>\\n\\n<span class=\\"token comment\\">// Definimos la estructura de la que anteriormente hicimos un forward declaration</span>\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClassPrivate</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// esta variable es privada :D</span>\\n    <span class=\\"token keyword\\">int</span> c<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// esta tambi√©n</span>\\n<span class=\\"token punctuation\\">}</span> MyClassPrivate<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// Implementamos el ctor</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">MyClass_ctor</span><span class=\\"token punctuation\\">(</span>MyClass <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> c<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// Inicializamos las variables</span>\\n    self<span class=\\"token operator\\">-></span>a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    self<span class=\\"token operator\\">-></span>private_members<span class=\\"token operator\\">-></span>b <span class=\\"token operator\\">=</span> b<span class=\\"token punctuation\\">;</span>\\n    self<span class=\\"token operator\\">-></span>private_members<span class=\\"token operator\\">-></span>c <span class=\\"token operator\\">=</span> c<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// Alojamos memoria</span>\\n    self<span class=\\"token operator\\">-></span>private_members <span class=\\"token operator\\">=</span> <span class=\\"token function\\">malloc</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>MyClassPrivate<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// M√©todo get_c</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">MyClass_get_c</span><span class=\\"token punctuation\\">(</span>MyClass <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> self<span class=\\"token operator\\">-></span>private_members<span class=\\"token operator\\">-></span>c<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// Dtor</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">MyClass_dtor</span><span class=\\"token punctuation\\">(</span>MyClass <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// limpiamos los recursos que haya utilizado MyClass</span>\\n    <span class=\\"token function\\">free</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token operator\\">-></span>private_members<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// main.c</span>\\n<span class=\\"token macro property\\">#<span class=\\"token directive property\\">include</span> <span class=\\"token string property\\">\\"class.h\\"</span></span>\\n<span class=\\"token macro property\\">#<span class=\\"token directive property\\">include</span> <span class=\\"token string property\\">&lt;stdio.h></span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// Creamos una instancia de la clase MyClass e invocamos al ctor</span>\\n    MyClass object<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">MyClass_ctor</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>object<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">25</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">int</span> tmp <span class=\\"token operator\\">=</span> object<span class=\\"token punctuation\\">.</span>private_members<span class=\\"token operator\\">-></span>b<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// oops, error, tipo incompleto</span>\\n    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"C vale: %d\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">MyClass_get_c</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>object<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token function\\">MyClass_dtor</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>object<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre>\\n<p>Como se puede ver, no es tan complicado realizar esto, quiz√° un poco repetitivo, sin embargo, hay una cuesti√≥n, espero que la hayas notado ;).</p>\\n<p>¬°<strong>Malloc</strong> solo para implementar variables privadas! üò±</p>\\n<p>Calma, que se puede implementar de otra forma, podemos tener un buffer local de memoria del tama√±o que necesitemos para\\nlas variables privadas, o confiar y utilizar una convenci√≥n para las variables privadas (personalmente creo que esto √∫ltimo es lo mejor).</p>\\n<h1 id=\\"herencia\\"><a id=\\"user-content-herencia\\" class=\\"anchor\\" href=\\"#herencia\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Herencia</h1>\\n<blockquote>\\n<p>Es un mecanismo para permitir que una clase X se base en otra clase Y, estableciendo una relaci√≥n &quot;X es subclase de Y&quot;</p>\\n</blockquote>\\n<blockquote>\\n    <i class=\\"v-icon mdi mdi-alert\\" style=\\"color: yellow; font-size: 2em\\"></i> Opini√≥n \\n   <br>\\n    <p>No soy partidario de abusar de la herencia, pues creo que puede dar lugar a c√≥digo muy complejo y dif√≠cil de mantener</p>\\n</blockquote>\\n<p>La herencia consiste en crear nuevas clases que partan de clases ya existentes, de manera que tienen todas las propiedades y m√©todos de la clase padre; implementar\\nesto en C tampoco supone dificultad alguna, aunque siendo estrictos, lo implementamos utilizando la composici√≥n.</p>\\n<pre class=\\"language-cpp\\"><code class=\\"language-cpp\\"><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Object</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> y<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">2dBox</span> <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">public</span> Object\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> width<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> height<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre>\\n<p>En C esto se traduce en:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> y<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> Object<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">2dBox</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Object super<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// clase base</span>\\n    <span class=\\"token keyword\\">int</span> width<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> height<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> <span class=\\"token number\\">2</span>dBox<span class=\\"token punctuation\\">;</span>\\n</code></pre>\\n<p>¬øC√≥mo se ve la estructura <code>2dBox</code> en memoria?, pues de la siguiente manera (sin contar padding, alignment ni tama√±o de los tipos de dato).</p>\\n<p><img src=\\"/images/blog/oop_c/mem_layout.png\\" alt=\\"Layout en memoria\\"></p>\\n<p>Con la imagen anterior podemos observar que las propiedades de la clase Object van antes que cualquier propiedad de la clase 2dBox, bien podr√≠amos ponerla en cualquier orden,\\npero por cuesti√≥n de est√©tica las pondremos al principio.</p>\\n<p>Hasta aqu√≠ todo bien, as√≠ que la herencia se puede resumir de la siguiente manera.</p>\\n<blockquote>\\n<p>Para heredar de otras clases tenemos que recurrir a la composici√≥n</p>\\n</blockquote>\\n<p>A√∫n hay un aspecto que no hemos tocado, ¬°la sobrecarga de m√©todos y los dtor virtuales!</p>\\n<h1 id=\\"polimorfismo\\"><a id=\\"user-content-polimorfismo\\" class=\\"anchor\\" href=\\"#polimorfismo\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Polimorfismo</h1>\\n<p>Antes de entrar a esto, voy a explicar que son los apuntadores a funcions, como declarar uno y como usarlos, posteriormente explicar√© lo que es una vtable.</p>\\n<h3 id=\\"apuntadores-a-funciones\\"><a id=\\"user-content-apuntadores-a-funciones\\" class=\\"anchor\\" href=\\"#apuntadores-a-funciones\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Apuntadores a funciones</h3>\\n<p>Los apuntadores a funciones (function pointers) son un tipo especial de apuntadores que tienen la caracter√≠stica de apuntar\\na una funci√≥n y para llamar a la funci√≥n a la que apuntan, los usamos como si fuera una funci√≥n.</p>\\n<p>La sintaxis para declarar un apuntador a funci√≥n es la siguiente (lo se, es fea).</p>\\n<pre><code>[tipo de retorno] (*nombre de la variable)(parametros...);\\n</code></pre>\\n<p>Y un uso de estos ser√≠a el siguiente:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token macro property\\">#<span class=\\"token directive property\\">include</span> <span class=\\"token string property\\">&lt;stdio.h></span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">square</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> param<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> param <span class=\\"token operator\\">*</span> param<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>my_func_ptr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> square<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// lo asignamos a la funci√≥n</span>\\n    <span class=\\"token comment\\">// tambi√©n podemos asignarlo aqu√≠ de la siguiente manera:</span>\\n    <span class=\\"token comment\\">// my_func_ptr = &amp;square;</span>\\n\\n    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">my_func_ptr</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">8</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre>\\n<p>Lo bueno es que podemos utilizar typedefs para hacerlos m√°s bonitos c:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token macro property\\">#<span class=\\"token directive property\\">include</span> <span class=\\"token string property\\">&lt;math.h></span></span>\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">double</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>FuncPtr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">double</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    FuncPtr fptr <span class=\\"token operator\\">=</span> sin<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Ya no esta feo :D</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre>\\n<p>Los apuntadores a funciones son muy √∫tiles cuando se desean implementar callbacks o personalizar el comportamiento de una funci√≥n (por ejemplo, <a href=\\"https://en.cppreference.com/w/c/algorithm/qsort\\">qsort</a>).</p>\\n<h3 id=\\"virtual-method-table\\"><a id=\\"user-content-virtual-method-table\\" class=\\"anchor\\" href=\\"#virtual-method-table\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Virtual method table</h3>\\n<p>Tambi√©n llamada vtable, es una forma de permitir las funciones virtuales (<em>dynamic dispatch</em>), es muy utilizada en muchos lenguajes,\\nde manera sencilla, consiste en una tabla que contiene apuntadores a los m√©todos que se deben llamar para determinada instancia, de esta manera\\nse sabe cu√°l funci√≥n virtual llamar.</p>\\n<p>Es importante mencionar que una vtable <em>es la misma</em> para objetos del mismo tipo, por lo que se puede compartir entre todas las instancias de determinada clase.</p>\\n<p>Un ejemplo de vtable para la siguiente clase (C++):</p>\\n<pre class=\\"language-cpp\\"><code class=\\"language-cpp\\">\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Hey</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">virtual</span> <span class=\\"token operator\\">~</span><span class=\\"token function\\">Hey</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">foo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">hey</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n</code></pre>\\n<div style=\\"overflow-x: auto;\\">\\n|M√©todo             |Funci√≥n que realiza ese proceso|\\n|-------------------|-------------------------------|\\n|Hey_dtor           |0x123EDFAA                     |\\n|Hey_foo            |0x00000000                     |\\n|Hey_hey            |0x00000000                     |\\n</dive>\\nNota: la funci√≥n es la direcci√≥n de la funci√≥n que realizar√° ese proceso, puesto que no tienen implementaci√≥n (a excepci√≥n del dtor) entonces no deben apuntar a una direcci√≥n v√°lida.\\n<p>Ahora veamos a la siguiente clase</p>\\n<pre class=\\"language-cpp\\"><code class=\\"language-cpp\\"><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Foo</span> <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">public</span> Hey\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">virtual</span> <span class=\\"token operator\\">~</span><span class=\\"token function\\">Foo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">foo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> override<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">hey</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> override<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre>\\n<p>Su vtable ser√≠a la siguiente (direcciones de memoria solo para demostraci√≥n, no reflejan direcciones reales):</p>\\n<table>\\n<thead>\\n<tr>\\n<th>M√©todo</th>\\n<th>Funci√≥n que realiza ese proceso</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Foo_dtor</td>\\n<td>0x123EDFAA</td>\\n</tr>\\n<tr>\\n<td>Foo_foo</td>\\n<td>0xAFE23400</td>\\n</tr>\\n<tr>\\n<td>Foo_hey</td>\\n<td>0xFF23400E</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Puesto que esta clase ya implementa todos los m√©todos, entonces ya apuntan a direcciones v√°lidas (que sean funciones).</p>\\n<p>Va va, pero ¬øc√≥mo implemento <strong>esto</strong> en C?</p>\\n<p>¬øRecuerdas lo de apuntadores a funciones?, pues los vamos a utilizar.</p>\\n<p>Introduciremos una estructura que cumpla con ese proposito:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Hey_Vtable</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>Class_dtor<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>Hey_foo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>Hey_hey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> Hey_Vtable<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Hey</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Hey_Vtable <span class=\\"token operator\\">*</span>vtable<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> Hey<span class=\\"token punctuation\\">;</span>\\n</code></pre>\\n<p>¬øDebemos implementar una estructura similar para Foo?, no, <strong>a menos</strong> que esta clase tenga m√°s funciones virtuales, o utilizar <a href=\\"https://en.wikipedia.org/wiki/Type_punning\\"><em>type punning</em></a>.</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\">\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Hey_dtor</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Hey_ctor</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">static</span> Hey_Vtable <span class=\\"token keyword\\">const</span> vtbl <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n        Hey_dtor<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// destructor</span>\\n        <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// foo</span>\\n        <span class=\\"token constant\\">NULL</span> <span class=\\"token comment\\">// hey</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    self<span class=\\"token operator\\">-></span>vtable <span class=\\"token operator\\">=</span> vtbl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre>\\n<p>¬°Genial!, ya podemos invocar al dtor de la siguiente manera: <code>hey.vtable-&gt;Class_dtor(&amp;hey)</code>.</p>\\n<p>Ahora, realicemos la implementaci√≥n para Foo:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Foo</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Hey base<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> Foo<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Foo_dtor</span><span class=\\"token punctuation\\">(</span>Foo <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">Hey_dtor</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token operator\\">-></span>base<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Foo_foo</span><span class=\\"token punctuation\\">(</span>Foo <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Foo_hey</span><span class=\\"token punctuation\\">(</span>Foo <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Foo_ctor</span><span class=\\"token punctuation\\">(</span>Foo <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">Hey_ctor</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>self<span class=\\"token operator\\">-></span>super<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">static</span> Hey_Vtable <span class=\\"token keyword\\">const</span> vtbl <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n        Foo_dtor<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// destructor</span>\\n        Foo_foo<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// foo</span>\\n        Foo_hey <span class=\\"token comment\\">// hey</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    self<span class=\\"token operator\\">-></span>base<span class=\\"token operator\\">-></span>vtable <span class=\\"token operator\\">=</span> vtbl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre>\\n<p>Y para llamar cualquier m√©todo lo hacemos de la misma manera que con el dtor.</p>\\n<p>Hay una cosa que no hemos discutido: el <em>casting</em> de clases hijas a padres y de padres a hijas, a continuaci√≥n, est√°n las opciones para hacerlo.</p>\\n<h3 id=\\"hija-a-padre\\"><a id=\\"user-content-hija-a-padre\\" class=\\"anchor\\" href=\\"#hija-a-padre\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Hija a padre</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Tipo</th>\\n<th>Implementaci√≥n</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Herencia simple, sin interfaces</td>\\n<td>Utilizar <code>super</code></td>\\n</tr>\\n<tr>\\n<td>Herencia multiple o con interfaces</td>\\n<td>Se implementan las interfaces como campos, se devuelve la interfaz a la que se necesite hacer casting</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\"padre-a-hija\\"><a id=\\"user-content-padre-a-hija\\" class=\\"anchor\\" href=\\"#padre-a-hija\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Padre a hija</h3>\\n<blockquote>\\n<p>Se recomienda tener un campo donde verifiques la clase a la que pertenece el objeto\\ny verifiques si el casting es v√°lido en tiempo de ejecuci√≥n</p>\\n</blockquote>\\n<table>\\n<thead>\\n<tr>\\n<th>Tipo</th>\\n<th>Implementaci√≥n</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Herencia simple, sin interfaces</td>\\n<td>Hacer casting de <code>super</code> a un objeto del tipo de la clase hija</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Para herencia multiple o multiples interfaces se necesita saber el layout em memoria del objeto en cuesti√≥n,\\npor ejemplo, si <code>super</code> tiene un offset de 0x00 en la clase hija, entonces basta\\ncon un casting, por el contrario, si el offset es diferente de 0x00, tenemos que\\nmovernos al principio y aqu√≠ ya hacer casting (esto es peligroso, se utiliza\\naritm√©tica de apuntadores), por ejemplo, imaginemos esto:</p>\\n<blockquote>\\n    <i class=\\"v-icon mdi mdi-alert\\" style=\\"color: yellow; font-size: 2em\\"></i> Esto es Undefined Behavior\\n    <br>\\n</blockquote>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Child</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Super1 super1<span class=\\"token punctuation\\">;</span>\\n    Super2 super2<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>Child<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">f</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Child c<span class=\\"token punctuation\\">;</span>\\n    Super1 <span class=\\"token operator\\">*</span>s1 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>Super1<span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>c<span class=\\"token punctuation\\">.</span>super1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    Super2 <span class=\\"token operator\\">*</span>s2 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>Super2<span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>c<span class=\\"token punctuation\\">.</span>super2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// Vamos a regresarnos</span>\\n    Child <span class=\\"token operator\\">*</span>c1 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>Child<span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span>s1<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span>temp <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span>s2<span class=\\"token punctuation\\">;</span>\\n    Child <span class=\\"token operator\\">*</span>c2 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>Child<span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span>s2 <span class=\\"token operator\\">-</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>Super1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// retrecedemos sizeof Super1 espacios en memoria</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre>\\n<p>Puedes verlo üëâ <a href=\\"https://godbolt.org/z/QQmJGQ\\">aqu√≠</a> üëà</p>\\n<h1 id=\\"conclusiones\\"><a id=\\"user-content-conclusiones\\" class=\\"anchor\\" href=\\"#conclusiones\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Conclusiones</h1>\\n<p>Realizar todo este proceso es muy tardado, y, probablemente es mejor que no lo hagas, si por\\nalguna raz√≥n quieres continuar utilizando C pero quieres orientaci√≥n a objetos, checa <a href=\\"https://developer.gnome.org/gobject/stable/\\">GObject</a>, probablemente sea lo que estas buscando.</p>\\n<p>Finalmente, esta no es la √∫nica forma de realizar todo esto, ¬°hay muchas!, en este sentido\\nC es bastante flexible, pues podemos hacer lo que queramos de la manera en que queramos.</p>\\n",\n    \n      meta: {"resourcePath":"/home/runner/work/alan-blog/alan-blog/content/blog/2020-06-24-oop_c.md"},\n     }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb250ZW50L2Jsb2cvMjAyMC0wNi0yNC1vb3BfYy5tZD9mZGZmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxrQjtBQUNBLG1CQUFtQixvWUFBb1k7O0FBRXZaLCtlQUErZSxhQUFhLGdNQUFnTSw0dEVBQTR0RSxxVkFBcVYsMENBQTBDLHE5Q0FBcTlDLHNMQUFzTCwrYkFBK2IsNENBQTRDLDBDQUEwQywyT0FBMk8sMEZBQTBGLDBGQUEwRiw0Q0FBNEMseURBQXlELG9yQ0FBb3JDLG1CQUFtQixnTUFBZ00sZUFBZSwrS0FBK0ssZ0VBQWdFLGlCQUFpQiwyREFBMkQsS0FBSyxpQkFBaUIsK0VBQStFLHVlQUF1ZSwwRkFBMEYsNENBQTRDLDhDQUE4Qyx5UUFBeVEsNEdBQTRHLHFJQUFxSSx3RkFBd0Ysc3hCQUFzeEIsaWZBQWlmLDRHQUE0RyxxSUFBcUksdUZBQXVGLCtMQUErTCx1RkFBdUYsbWVBQW1lLGtQQUFrUCx5UUFBeVEsNEpBQTRKLDRDQUE0QyxrREFBa0QseWVBQXllLHVVQUF1VSwrVEFBK1QsbVdBQW1XLHVVQUF1VSwwRkFBMEYsOEpBQThKLGlHQUFpRyx5REFBeUQsNGZBQTRmLG9QQUFvUCw4TEFBOEwsOExBQThMLGllQUFpZSw0Q0FBNEMseVVBQXlVLGdNQUFnTSw0Q0FBNEMsaVVBQWlVLHdVQUF3VSw0Q0FBNEMsZ1dBQWdXLCtRQUErUSx5S0FBeUssNklBQTZJLDJQQUEyUCwrT0FBK08sc1lBQXNZLG9JQUFvSSwrSUFBK0ksMEZBQTBGLDRDQUE0Qyx1S0FBdUssMmpDQUEyakMsd0JBQXdCLCtGQUErRixxVkFBcVYsNFRBQTRULDBGQUEwRiwwRkFBMEYsNENBQTRDLDBDQUEwQyxvT0FBb08sOEZBQThGLCtGQUErRiw0Q0FBNEMsMENBQTBDLDJPQUEyTywwRkFBMEYsMEZBQTBGLDRDQUE0QyxpREFBaUQsc0xBQXNMLDREQUE0RCxpSkFBaUosK0ZBQStGLDRDQUE0QyxvRkFBb0Ysb2xGQUFvbEYsNFBBQTRQLG9SQUFvUiwrSUFBK0ksNENBQTRDLGdRQUFnUSwwWUFBMFksdU9BQXVPLE9BQU8saWJBQWliLDRDQUE0QyxvU0FBb1Msb1pBQW9aLGdRQUFnUSx3R0FBd0csc0dBQXNHLHNuREFBc25ELDBhQUEwYSxvVkFBb1Ysb1ZBQW9WLDRDQUE0QywwQ0FBMEMsd0RBQXdELCt3QkFBK3dCLDBhQUEwYSxnT0FBZ08sMENBQTBDLGdPQUFnTywwQ0FBMEMsNENBQTRDLDBDQUEwQyxtK0JBQW0rQixrV0FBa1csK1ZBQStWLCtWQUErViw0Q0FBNEMscURBQXFELG9MQUFvTCx3R0FBd0csNENBQTRDLDhDQUE4QyxzakJBQXNqQiw0Q0FBNEMsMlFBQTJRLCtMQUErTCx5WUFBeVksMENBQTBDLCtJQUErSSw0Q0FBNEMsNkdBQTZHLGdCQUFnQixzU0FBc1Msd0RBQXdELDRDQUE0Qyw4Q0FBOEMsMlFBQTJRLGtPQUFrTyw0Q0FBNEMseVFBQXlRLDBDQUEwQyx5UUFBeVEsMENBQTBDLDJRQUEyUSx5SUFBeUkscUlBQXFJLCtMQUErTCxtVUFBbVUsMENBQTBDLDJMQUEyTCw0Q0FBNEMsMndGQUEyd0YsNFNBQTRTLDZEQUE2RCw2REFBNkQsNENBQTRDLCtDQUErQyxxTkFBcU4sdURBQXVELHFUQUFxVCxxSUFBcUkscVRBQXFULHFJQUFxSSwyVUFBMlUsa1lBQWtZLDRnQkFBNGdCLG1JQUFtSTs7QUFFL3M4QyxhQUFhLHdGQUF3RjtBQUNyRyIsImZpbGUiOiIyNzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbm1vZHVsZS5leHBvcnRzID0geyBcbiAgICAgIGF0dHJpYnV0ZXM6IHtcInRpdGxlXCI6XCJQcm9ncmFtYWNpw7NuIG9yaWVudGFkYSBhIG9iamV0b3MgZW4gQ1wiLFwieWVhclwiOjIwMjAsXCJtb250aFwiOjcsXCJkYXlcIjoyLFwiaG91clwiOlwiMDA6MjVcIixcImV4Y2VycHRcIjpcIsK/UXXDqT8sIMK/cHJvZ3JhbWFjacOzbiBvcmllbnRhZGEgYSBvYmpldG9zIGVuIEM/LCDCv2VzIGVzdG8gcG9zaWJsZT8sIGxhIHJlc3B1ZXN0YSBlcyDCoXPDrSwgc2kgZXMgcG9zaWJsZSEsIHkgbm8gZXMgdGFuIGNvbXBsaWNhZG8gY29tbyBzdWVuYSwgcGVybyByZXF1aWVyZSBkZSB0cmFiYWpvIG1hbnVhbCDwn5KqLCBlbnRvbmNlcywgcmVwYXNlbW9zIGxvIHF1ZSBlcyBsYSBwcm9ncmFtYWNpw7NuIG9yaWVudGFkYSBhIG9iamV0b3NcIixcInBpY3R1cmVcIjpcIi9pbWFnZXMvYmxvZy9vb3BfYy9oZWFkZXIucG5nXCJ9LFxuICAgIFxuICAgICAgaHRtbDogXCI8cD5FbCBmaW4gZGUgZXN0ZSBhcnTDrWN1bG8gZXMgaW5mb3JtYXRpdm8sIHByb2JhYmxlbWVudGUgPGVtPm5vPC9lbT4gZGViZXLDrWFzIGhhY2VyIGVzdG8sIGVzIHRhcmRhZG8geSBlblxcbkMgZXMgbWVqb3IgaGFjZXIgbGFzIGNvc2FzIGRlIG90cmEgZm9ybWE8L3A+XFxuPHA+wr9RdcOpPywgwr9wcm9ncmFtYWNpw7NuIG9yaWVudGFkYSBhIG9iamV0b3MgZW4gQz8sIMK/ZXMgZXN0byBwb3NpYmxlPywgbGEgcmVzcHVlc3RhIGVzIMKhc8OtLCBzaSBlcyBwb3NpYmxlISwgeSBubyBlcyB0YW4gY29tcGxpY2FkbyBjb21vIHN1ZW5hLCBwZXJvIHJlcXVpZXJlIGRlIHRyYWJham8gbWFudWFsIPCfkqosIGVudG9uY2VzLCByZXBhc2Vtb3MgbG8gcXVlIGVzIGxhIHByb2dyYW1hY2nDs24gb3JpZW50YWRhIGEgb2JqZXRvczwvcD5cXG48YmxvY2txdW90ZT5cXG48cD5FcyB1biBwYXJhZGlnbWEgZGUgcHJvZ3JhbWFjacOzbiBiYXNhZG8gZW4gZWwgY29uY2VwdG8gZGUgJnF1b3Q7b2JqZXRvcyZxdW90OywgcXVlIGNvbnRpZW5lbiBkYXRvcyBlbiBsYSBmb3JtYSBkZSBjYW1wb3MgKGNvbm9jaWRvcyBjb21vIGF0cmlidXRvcyBvIHByb3BpZWRhZGVzKSB5IGPDs2RpZ29cXG5lbiBsYSBmb3JtYSBkZSBwcm9jZWRpbWllbnRvcyAobGxhbWFkb3MgbcOpdG9kb3MpPC9wPlxcbjwvYmxvY2txdW90ZT5cXG48cCBzdHlsZT1cXFwiZm9udC1zaXplOiAwLjdlbTsgdGV4dC1hbGlnbjogcmlnaHRcXFwiPlRvbWFkbyBkZSA8YSBocmVmPVxcXCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9PYmplY3Qtb3JpZW50ZWRfcHJvZ3JhbW1pbmcjY2l0ZV9ub3RlLTFcXFwiPldpa2lwZWRpYTwvYT48L3A+XFxuPHA+T2ssIHBlcm8gwr9jw7NtbyB1c28gbGEgT09QIGVuIEM/PC9wPlxcbjxwPkFudGVzIGRlIGVtcGV6YXIsIGhheSBtdWNoYXMgZm9ybWFzIGRlIGhhY2VyIGVzdG8sIGVuIGdlbmVyYWwgdG9kYXMgY29tcGFydGVuIGNpZXJ0YXMgc2ltaWxpdHVkZXMsIHBvciBsbyBxdWUgZXN0YSBzb2xvIGVzIHVuYSBmb3JtYSBkZSBoYWNlcmxvPC9wPlxcbjxwPkVudG9uY2VzLCDCoWNvbWVuY2Vtb3MhPC9wPlxcbjxoMSBpZD1cXFwiY2xhc2VzXFxcIj48YSBpZD1cXFwidXNlci1jb250ZW50LWNsYXNlc1xcXCIgY2xhc3M9XFxcImFuY2hvclxcXCIgaHJlZj1cXFwiI2NsYXNlc1xcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjxzdmcgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJvY3RpY29uIG9jdGljb24tbGlua1xcXCIgaGVpZ2h0PVxcXCIxNlxcXCIgdmVyc2lvbj1cXFwiMS4xXFxcIiB2aWV3Ym94PVxcXCIwIDAgMTYgMTZcXFwiIHdpZHRoPVxcXCIxNlxcXCI+PHBhdGggZD1cXFwiTTQgOWgxdjFINGMtMS41IDAtMy0xLjY5LTMtMy41UzIuNTUgMyA0IDNoNGMxLjQ1IDAgMyAxLjY5IDMgMy41IDAgMS40MS0uOTEgMi43Mi0yIDMuMjVWOC41OWMuNTgtLjQ1IDEtMS4yNyAxLTIuMDlDMTAgNS4yMiA4Ljk4IDQgOCA0SDRjLS45OCAwLTIgMS4yMi0yIDIuNVMzIDkgNCA5em05LTNoLTF2MWgxYzEgMCAyIDEuMjIgMiAyLjVTMTMuOTggMTIgMTMgMTJIOWMtLjk4IDAtMi0xLjIyLTItMi41IDAtLjgzLjQyLTEuNjQgMS0yLjA5VjYuMjVjLTEuMDkuNTMtMiAxLjg0LTIgMy4yNUM2IDExLjMxIDcuNTUgMTMgOSAxM2g0YzEuNDUgMCAzLTEuNjkgMy0zLjVTMTQuNSA2IDEzIDZ6XFxcIj48L3BhdGg+PC9zdmc+PC9hPkNsYXNlczwvaDE+XFxuPHA+wr9RdcOpIHNlcsOtYSBkZSB1biBsZW5ndWFqZSBvcmllbnRhZG8gYSBvYmpldG9zIHNpIG5vIHR1dmllcmEgY2xhc2VzPywgcG9yIGVzbyBlcyBsbyBwcmltZXJvIHF1ZSBkZWJlbW9zIHBlbnNhciBlbiBpbXBsZW1lbnRhci5cXG5EZSBoZWNobywgbm8gZXMgZGlmw61jaWwgaW1wbGVtZW50YXIgZXN0by48L3A+XFxuPHA+UHJpbWVybywgdmVhbW9zIGPDs21vIHNlIGNyZWEgdW5hIGNsYXNlIGVuIEMrKzo8L3A+XFxuPHByZSBjbGFzcz1cXFwibGFuZ3VhZ2UtY3BwXFxcIj48Y29kZSBjbGFzcz1cXFwibGFuZ3VhZ2UtY3BwXFxcIj48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+Y2xhc3M8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjbGFzcy1uYW1lXFxcIj5DbGFzZTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj5bPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+Ojwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj5bPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5wdWJsaWM8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj58PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5wcm90ZWN0ZWQ8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj58PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5wcml2YXRlPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+XTwvc3Bhbj4gQ2xhc2UxPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4sPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPls8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnB1YmxpYzwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPnw8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnByb3RlY3RlZDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPnw8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnByaXZhdGU8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj5dPC9zcGFuPiBDbGFzZTI8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPi48L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4uPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ljwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPl08L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj57PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Wzwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+cHVibGljPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+fDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+cHJvdGVjdGVkPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+fDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+cHJpdmF0ZTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPl08L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj59PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG48L2NvZGU+PC9wcmU+XFxuPGJsb2NrcXVvdGU+XFxuPHA+Y2xhc3MgeSBzdHJ1Y3QgZW4gQysrIHNvbiBsbyBtaXNtbywgc29sbyBkaWZpZXJlbiBwb3IgZWwgdGlwbyBkZSBhY2Nlc28gcG9yIGRlZmVjdG8gc2llbmRvIHB1YmxpYyBlbiBzdHJ1Y3QgeSBwcml2YXRlIGVuIGNsYXNzPC9wPlxcbjwvYmxvY2txdW90ZT5cXG48cD5FbiBDIHNvbG8gdGVuZW1vcyBsYXMgPGNvZGU+c3RydWN0PC9jb2RlPiwgcGVybyBjb24gZWxsYXMgcG9kZW1vcyBoYWNlciB0b2RvLCBleGNlcHRvIHByb3BpZWRhZGVzIHByaXZhZGFzIHkgcHJvdGVnaWRhcywgwr9vIG5vPywgwqFzaSBwb2RlbW9zIHRlbmVyIHByb3BpZWRhZGVzIHByaXZhZGFzISxcXG5oYXkgbXVjaGFzIGZvcm1hcyBkZSBoYWNlciBlc3RvLCBhbGd1bmFzIHF1ZSBubyBzb24gdGFuIHByaXZhZGFzIChwb3IgZWplbXBsbywgdGVuZXIgdW4gcHJlZmlqbyBwYXJhIGluZGljYXIgcXVlIHNvbiBwcml2YWRhcykgbyB1dGlsaXphciB1bmEgZXN0cnVjdHVyYSBxdWUgaW1wbGVtZW50ZVxcbmVzbyB5IHNvbG8gcHVlZGEgc2VyIGFjY2VkaWRhIGRlc2RlIHVuIGx1Z2FyIHByaXZhZG8g8J+ZgC48L3A+XFxuPHA+UGFyYSBlc3RvIHNlIHJlcXVpZXJlIGRlIHVuYSBlc3RydWN0dXJhIHF1ZSBzaXJ2YSBwYXJhIGFsbWFjZW5hciBsYXMgdmFyaWFibGVzIHByaXZhZGFzIHkgcXVlIG5vIHB1ZWRhIHNlciB1dGlsaXphZGEgZW4gZWwgY29udGV4dG8gPGVtPnDDumJsaWNvPC9lbT4sXFxucGFyYSBlbGxvIHZhbW9zIGEgcmVjdXJyaXIgYSB1dGlsaXphciB1bmEgPGVtPmZvcndhcmQgZGVjbGFyYXRpb248L2VtPiBkZSBlc3RhIGVzdHJ1Y3R1cmEuPC9wPlxcbjxibG9ja3F1b3RlPlxcbjxwPjxlbT5Gb3J3YXJkIGRlY2xhcmF0aW9uPC9lbT4gc2UgcmVmaWVyZSBhIGRlY2xhcmFyIHVuIGlkZW50aWZpY2Fkb3IgKHRpcG8sIHZhcmlhYmxlLCBjb25zdGFudGUsIGZ1bmNpw7NuKSBhIGxhIHF1ZSB0b2RhdsOtYSBubyBzZSBsZSBoYSBkYWRvIHVuYSBkZWZpbmljacOzbiBjb21wbGV0YTwvcD5cXG48L2Jsb2NrcXVvdGU+XFxuPHA+RW50b25jZXMsIGltYWdpbmVtb3MgcXVlIG51ZXN0cmEgY2xhc2Ugc2UgbGxhbWEgPGNvZGU+TXlDbGFzczwvY29kZT4sIGVudG9uY2VzIHBvZHLDrWFtb3MgbGxhbWFyIGEgbnVlc3RyYSBpbXBsZW1lbnRhY2nDs24gZGUgbGFzIHZhcmlhYmxlcyBwcml2YWRhc1xcbjxjb2RlPk15Q2xhc3NQcml2YXRlPC9jb2RlPiwgcG9yIGxvIHF1ZSBxdWVkYXLDrWEgZGUgZXN0YSBmb3JtYTo8L3A+XFxuPHByZSBjbGFzcz1cXFwibGFuZ3VhZ2UtY1xcXCI+PGNvZGUgY2xhc3M9XFxcImxhbmd1YWdlLWNcXFwiPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjb21tZW50XFxcIj4vLyAuaDwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+c3RydWN0PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY2xhc3MtbmFtZVxcXCI+TXlDbGFzc1ByaXZhdGU8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj50eXBlZGVmPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+c3RydWN0PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY2xhc3MtbmFtZVxcXCI+TXlDbGFzczwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPns8L3NwYW4+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjb21tZW50XFxcIj4vLyBFbCBjb21waWxhZG9yIG5lY2VzaXRhIHNhYmVyIGVsIHRhbWHDsW8sIGVuIGVzdGUgY2FzbyBlbCB0YW1hw7FvIGRlIHVuIGFwdW50YWRvcjwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGNvbW1lbnRcXFwiPi8vIFNpIG5vIGVzIHVuIGFwdW50YWRvciwgZWwgY29tcGlsYWRvciBubyBzYWJlIGVsIHRhbWHDsW8geSBwdWVzIG5vIG5vcyBkZWphcsOhIGNvbXBpbGFyPC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+c3RydWN0PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY2xhc3MtbmFtZVxcXCI+TXlDbGFzc1ByaXZhdGU8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+Kjwvc3Bhbj5wcml2YXRlPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+fTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIGNvbW1lbnRcXFwiPi8vIC5jPC9zcGFuPlxcblxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj50eXBlZGVmPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+c3RydWN0PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY2xhc3MtbmFtZVxcXCI+TXlDbGFzc1ByaXZhdGU8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj57PC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+aW50PC9zcGFuPiBiPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+aW50PC9zcGFuPiBjPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+fTwvc3Bhbj4gTXlDbGFzc1ByaXZhdGU8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuXFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIGNvbW1lbnRcXFwiPi8vIG9iai0+cHJpdmF0ZSBzb2xvIHB1ZWRlIHNlciBhY2NlZGlkbyBlbiBlc3RlIGFyY2hpdm8qIChoYXkgbWFuZXJhcyBkZSBzYWx0YXJzZSBlc3RvLCBwZXJvIG5vIGxhcyBtZW5jaW9uYXLDqSBhcXXDrSk8L3NwYW4+XFxuPC9jb2RlPjwvcHJlPlxcbjxoMSBpZD1cXFwiY29uc3RydWN0b3Jlcy15LWRlc3RydWN0b3Jlc1xcXCI+PGEgaWQ9XFxcInVzZXItY29udGVudC1jb25zdHJ1Y3RvcmVzLXktZGVzdHJ1Y3RvcmVzXFxcIiBjbGFzcz1cXFwiYW5jaG9yXFxcIiBocmVmPVxcXCIjY29uc3RydWN0b3Jlcy15LWRlc3RydWN0b3Jlc1xcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjxzdmcgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJvY3RpY29uIG9jdGljb24tbGlua1xcXCIgaGVpZ2h0PVxcXCIxNlxcXCIgdmVyc2lvbj1cXFwiMS4xXFxcIiB2aWV3Ym94PVxcXCIwIDAgMTYgMTZcXFwiIHdpZHRoPVxcXCIxNlxcXCI+PHBhdGggZD1cXFwiTTQgOWgxdjFINGMtMS41IDAtMy0xLjY5LTMtMy41UzIuNTUgMyA0IDNoNGMxLjQ1IDAgMyAxLjY5IDMgMy41IDAgMS40MS0uOTEgMi43Mi0yIDMuMjVWOC41OWMuNTgtLjQ1IDEtMS4yNyAxLTIuMDlDMTAgNS4yMiA4Ljk4IDQgOCA0SDRjLS45OCAwLTIgMS4yMi0yIDIuNVMzIDkgNCA5em05LTNoLTF2MWgxYzEgMCAyIDEuMjIgMiAyLjVTMTMuOTggMTIgMTMgMTJIOWMtLjk4IDAtMi0xLjIyLTItMi41IDAtLjgzLjQyLTEuNjQgMS0yLjA5VjYuMjVjLTEuMDkuNTMtMiAxLjg0LTIgMy4yNUM2IDExLjMxIDcuNTUgMTMgOSAxM2g0YzEuNDUgMCAzLTEuNjkgMy0zLjVTMTQuNSA2IDEzIDZ6XFxcIj48L3BhdGg+PC9zdmc+PC9hPkNvbnN0cnVjdG9yZXMgeSBkZXN0cnVjdG9yZXM8L2gxPlxcbjxibG9ja3F1b3RlPlxcbjxwPlVuIGNvbnN0cnVjdG9yIGVzIHVuIG3DqXRvZG8gcXVlIHNlIGVuY2FyZ2EgZGUgaW5pY2lhbGl6YXIgdW4gb2JqZXRvIGRlIGNpZXJ0YSBjbGFzZS48L3A+XFxuPC9ibG9ja3F1b3RlPlxcbjxwPkxvcyBjb25zdHJ1Y3RvcmVzIHNvbiB1bmEgZGUgbGFzIHBhcnRlcyBtw6FzIGltcG9ydGFudGVzLCBwdWVzIHBlcm1pdGVuIGxhIGluaWNpYWxpemFjacOzbiBkZSBsb3Mgb2JqZXRvcyBhIHVuIGVzdGFkb1xcbmVuIGVsIHF1ZSBzZWEgY29udmVuaWVudGUgcGFyYSBlbCBwcm9ncmFtYSwgcG9yIGVqZW1wbG8sIGltYWdpbmVtb3MgdW5hIGNsYXNlIGxsYW1hZGEgJnF1b3Q7VGNwQ29ubmVjdGlvbiZxdW90OyB5IHVuIGNvbnN0cnVjdG9yIHF1ZSB0b21lXFxudW5hIGRpcmVjY2nDs24gaXAgeSB1biBwdWVydG8gcGFyYSBjb25lY3RhcnNlLCBhcXXDrSBzZSBwdWVkZSBlc3RhYmxlY2VyIGVzYSBwYXJ0ZSBkZSBpbmljaWFsaXphciBsYSBjb25leGnDs24gYSB1biBlc3RhZG8gZW4gZWxcXG5xdWUgcmVhbG1lbnRlIGVzdMOpIGNvbmVjdGFkbyBhICZxdW90O2lwOnB1ZXJ0byZxdW90Oy48L3A+XFxuPHA+RW4gQysrIGNvbnRhbW9zIGNvbiBkaXN0aW50b3MgdGlwb3MgZGUgY3RvciwgdG9kb3MgdGllbmVuIGxhIHRhcmVhIGRlIGluaWNpYWxpemFyIHVuIG9iamV0byBkZSB1bmEgY2xhc2UgZXNwZWPDrWZpY2EuPC9wPlxcbjx1bD5cXG48bGk+PGNvZGU+Q2xhc3M6OkNsYXNzKCk8L2NvZGU+IC0mZ3Q7IGNvbnN0cnVjdG9yIHZhY8OtbzwvbGk+XFxuPGxpPjxjb2RlPkNsYXNzOkNsYXNzKGNvbnN0IENsYXNzICZhbXA7b2JqKTwvY29kZT4gLSZndDsgY29uc3RydWN0b3IgY29waWE8L2xpPlxcbjxsaT48Y29kZT5DbGFzczo6Q2xhc3MoQ2xhc3MgJmFtcDsmYW1wO29iaik8L2NvZGU+IC0mZ3Q7IGNvbnN0cnVjdG9yIGRlIG1vdmltaWVudG88L2xpPlxcbjxsaT48Y29kZT5DbGFzczo6Q2xhc3MocGFyYW1zLi4uKTwvY29kZT4gLSZndDsgY29uc3RydWN0b3IgY29uIHBhcsOhbWV0cm9zPC9saT5cXG48L3VsPlxcbjxwPkRpY2hvIGVzdG8sIMK/Y8OzbW8gdXRpbGl6YW1vcyBjb25zdHJ1Y3RvcmVzIGVuIEM/PC9wPlxcbjxwPlB1ZXN0byBxdWUgZW4gQyBzb2xvIHRlbmVtb3MgZnVuY2lvbmVzLCB0ZW5lbW9zIHF1ZSByZWN1cnJpciBhIGVsbGFzIHBhcmEgaW5pY2lhbGl6YXIgbnVlc3RyYXMgaW5zdGFuY2lhcyxcXG51bmEgZm9ybWEgZGUgaGFjZXIgZXN0byBlcyBkZSBsYSBzaWd1aWVudGUgbWFuZXJhOjwvcD5cXG48cHJlIGNsYXNzPVxcXCJsYW5ndWFnZS1jXFxcIj48Y29kZSBjbGFzcz1cXFwibGFuZ3VhZ2UtY1xcXCI+PHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnR5cGVkZWY8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5zdHJ1Y3Q8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjbGFzcy1uYW1lXFxcIj5IZXk8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj57PC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+aW50PC9zcGFuPiBhPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+fTwvc3Bhbj4gSGV5PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcblxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj52b2lkPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPkhleV9jdG9yPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj5IZXkgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPnNlbGY8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcblxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjb21tZW50XFxcIj4vLyB5IHBhcmEgdXNhcmxhPC9zcGFuPlxcbkhleSBoZXk8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIGZ1bmN0aW9uXFxcIj5IZXlfY3Rvcjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4mYW1wOzwvc3Bhbj5zZWxmPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG48L2NvZGU+PC9wcmU+XFxuPHA+U2VuY2lsbG8sIMK/bm8/LCBsb3MgZGVtw6FzIGNvbnN0cnVjdG9yZXMgcHVlZGVuIHNlciBpbXBsZW1lbnRhZG9yIGRlIGxhIG1pc21hIG1hbmVyYSwgc29sbyBiYXN0YSBjb24gbWFuZGFybGUgbG9zIHBhcsOhbWV0cm9zIHF1ZSBuZWNlc2l0ZW1vcyxcXG5wb3IgZWplbXBsbywgdW4gY29uc3RydWN0b3IgcXVlIHJlY2liYSB1biBpbnQgc2Vyw61hIGFzw606PC9wPlxcbjxwcmUgY2xhc3M9XFxcImxhbmd1YWdlLWNcXFwiPjxjb2RlIGNsYXNzPVxcXCJsYW5ndWFnZS1jXFxcIj48c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8gcHVlc3RvIHF1ZSBlbiBDIG5vIGV4aXN0ZSBsYSBzb2JyZWNhcmdhIGRlIGZ1bmNpb25lcywgcG9kZW1vcyBleHRlbmRlciBlbCBub21icmUgZGVsIGN0b3IgY29uIGxvcyBwYXJhbWV0cm9zIHF1ZSByZWNpYmE8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnZvaWQ8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBmdW5jdGlvblxcXCI+SGV5X2N0b3JfaTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+SGV5IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+Kjwvc3Bhbj5zZWxmPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4sPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+aW50PC9zcGFuPiBwYXJhbTxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuPC9jb2RlPjwvcHJlPlxcbjxwPk95ZSwgwr95IHVuIGRlc3RydWN0b3I/IPCfkqU8L3A+XFxuPHA+wqFQdWVzIGRlIGxhIG1pc21hIG1hbmVyYSEsIGltcGxlbWVudGFtb3MgdW5hIGZ1bmNpw7NuIHF1ZSBzZSBlbmNhcmd1ZSBkZSByZWFsaXphciBlc3RhIGZ1bmNpw7NuLCB2ZWFtb3MgZWwgc2lndWllbnRlIGVqZW1wbG86PC9wPlxcbjxwcmUgY2xhc3M9XFxcImxhbmd1YWdlLWNcXFwiPjxjb2RlIGNsYXNzPVxcXCJsYW5ndWFnZS1jXFxcIj48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+dm9pZDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGZ1bmN0aW9uXFxcIj5IZXlfZHRvcjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+SGV5IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+Kjwvc3Bhbj5zZWxmPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8geSBwYXJhIHVzYXJsbzwvc3Bhbj5cXG5IZXkgaGV5PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBmdW5jdGlvblxcXCI+SGV5X2N0b3I8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+JmFtcDs8L3NwYW4+aGV5PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8gdXNhbW9zIGVsIG9iamV0bzwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPkhleV9kdG9yPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPiZhbXA7PC9zcGFuPmhleTxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjb21tZW50XFxcIj4vLyB5IGxsYW1hbW9zIGFsIGR0b3I8L3NwYW4+XFxuPC9jb2RlPjwvcHJlPlxcbjxwPsKhVmVhbW9zIHVuIGVqZW1wbG8gZG9uZGUgYXBsaXF1ZW1vcyBjbGFzZXMsIGN0b3JzIHkgZHRvciE8L3A+XFxuPHByZSBjbGFzcz1cXFwibGFuZ3VhZ2UtY1xcXCI+PGNvZGUgY2xhc3M9XFxcImxhbmd1YWdlLWNcXFwiPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjb21tZW50XFxcIj4vLyBDbGFzcy5oPC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjb21tZW50XFxcIj4vLyBGb3J3YXJkIGRlY2xhcmUgZGUgbGEgZXN0cnVjdHVyYSBwYXJhIGxvcyBjYW1wb3MgcHJpdmFkb3M8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnN0cnVjdDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGNsYXNzLW5hbWVcXFwiPk15Q2xhc3NQcml2YXRlPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8gQ3JlYW1vcyBsYSBjbGFzZTwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+dHlwZWRlZjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnN0cnVjdDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGNsYXNzLW5hbWVcXFwiPk15Q2xhc3M8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj57PC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8gdmFyaWFibGVzIHByaXZhZGFzPC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+c3RydWN0PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY2xhc3MtbmFtZVxcXCI+TXlDbGFzc1ByaXZhdGU8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+Kjwvc3Bhbj5wcml2YXRlX21lbWJlcnM8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuXFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjb21tZW50XFxcIj4vLyB2YXJpYWJsZXMgcHVibGljYXM8L3NwYW4+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5pbnQ8L3NwYW4+IGE8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj59PC9zcGFuPiBNeUNsYXNzPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcblxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjb21tZW50XFxcIj4vLyBDdG9yPC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj52b2lkPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPk15Q2xhc3NfY3Rvcjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+TXlDbGFzcyA8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPio8L3NwYW4+c2VsZjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+LDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmludDwvc3Bhbj4gYjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+LDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmludDwvc3Bhbj4gYzxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuXFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIGNvbW1lbnRcXFwiPi8vIE3DqXRvZG8gZ2V0X2M8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmludDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGZ1bmN0aW9uXFxcIj5NeUNsYXNzX2dldF9jPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj5NeUNsYXNzIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+Kjwvc3Bhbj5zZWxmPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8gZHRvcjwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+dm9pZDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGZ1bmN0aW9uXFxcIj5NeUNsYXNzX2R0b3I8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPk15Q2xhc3MgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPnNlbGY8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcblxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjb21tZW50XFxcIj4vLyBDbGFzcy5jPC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBtYWNybyBwcm9wZXJ0eVxcXCI+IzxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBkaXJlY3RpdmUgcHJvcGVydHlcXFwiPmluY2x1ZGU8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBzdHJpbmcgcHJvcGVydHlcXFwiPlxcXCJjbGFzcy5IXFxcIjwvc3Bhbj48L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIG1hY3JvIHByb3BlcnR5XFxcIj4jPHNwYW4gY2xhc3M9XFxcInRva2VuIGRpcmVjdGl2ZSBwcm9wZXJ0eVxcXCI+aW5jbHVkZTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIHN0cmluZyBwcm9wZXJ0eVxcXCI+Jmx0O3N0ZGxpYi5oPjwvc3Bhbj48L3NwYW4+XFxuXFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIGNvbW1lbnRcXFwiPi8vIERlZmluaW1vcyBsYSBlc3RydWN0dXJhIGRlIGxhIHF1ZSBhbnRlcmlvcm1lbnRlIGhpY2ltb3MgdW4gZm9yd2FyZCBkZWNsYXJhdGlvbjwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+dHlwZWRlZjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnN0cnVjdDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGNsYXNzLW5hbWVcXFwiPk15Q2xhc3NQcml2YXRlPC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+ezwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmludDwvc3Bhbj4gYjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGNvbW1lbnRcXFwiPi8vIGVzdGEgdmFyaWFibGUgZXMgcHJpdmFkYSA6RDwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmludDwvc3Bhbj4gYzxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGNvbW1lbnRcXFwiPi8vIGVzdGEgdGFtYmnDqW48L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj59PC9zcGFuPiBNeUNsYXNzUHJpdmF0ZTxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8gSW1wbGVtZW50YW1vcyBlbCBjdG9yPC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj52b2lkPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPk15Q2xhc3NfY3Rvcjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+TXlDbGFzcyA8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPio8L3NwYW4+c2VsZjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+LDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmludDwvc3Bhbj4gYjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+LDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmludDwvc3Bhbj4gYzxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPns8L3NwYW4+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjb21tZW50XFxcIj4vLyBJbmljaWFsaXphbW9zIGxhcyB2YXJpYWJsZXM8L3NwYW4+XFxuICAgIHNlbGY8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPi0+PC9zcGFuPmEgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj49PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gbnVtYmVyXFxcIj4wPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG4gICAgc2VsZjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+LT48L3NwYW4+cHJpdmF0ZV9tZW1iZXJzPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4tPjwvc3Bhbj5iIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+PTwvc3Bhbj4gYjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG4gICAgc2VsZjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+LT48L3NwYW4+cHJpdmF0ZV9tZW1iZXJzPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4tPjwvc3Bhbj5jIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+PTwvc3Bhbj4gYzxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGNvbW1lbnRcXFwiPi8vIEFsb2phbW9zIG1lbW9yaWE8L3NwYW4+XFxuICAgIHNlbGY8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPi0+PC9zcGFuPnByaXZhdGVfbWVtYmVycyA8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPj08L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBmdW5jdGlvblxcXCI+bWFsbG9jPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+c2l6ZW9mPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj5NeUNsYXNzUHJpdmF0ZTxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+fTwvc3Bhbj5cXG5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8gTcOpdG9kbyBnZXRfYzwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+aW50PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPk15Q2xhc3NfZ2V0X2M8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPk15Q2xhc3MgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPnNlbGY8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj57PC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+cmV0dXJuPC9zcGFuPiBzZWxmPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4tPjwvc3Bhbj5wcml2YXRlX21lbWJlcnM8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPi0+PC9zcGFuPmM8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj59PC9zcGFuPlxcblxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjb21tZW50XFxcIj4vLyBEdG9yPC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj52b2lkPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPk15Q2xhc3NfZHRvcjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+TXlDbGFzcyA8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPio8L3NwYW4+c2VsZjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPns8L3NwYW4+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjb21tZW50XFxcIj4vLyBsaW1waWFtb3MgbG9zIHJlY3Vyc29zIHF1ZSBoYXlhIHV0aWxpemFkbyBNeUNsYXNzPC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPmZyZWU8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPnNlbGY8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPi0+PC9zcGFuPnByaXZhdGVfbWVtYmVyczxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj59PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjb21tZW50XFxcIj4vLyBtYWluLmM8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIG1hY3JvIHByb3BlcnR5XFxcIj4jPHNwYW4gY2xhc3M9XFxcInRva2VuIGRpcmVjdGl2ZSBwcm9wZXJ0eVxcXCI+aW5jbHVkZTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIHN0cmluZyBwcm9wZXJ0eVxcXCI+XFxcImNsYXNzLmhcXFwiPC9zcGFuPjwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gbWFjcm8gcHJvcGVydHlcXFwiPiM8c3BhbiBjbGFzcz1cXFwidG9rZW4gZGlyZWN0aXZlIHByb3BlcnR5XFxcIj5pbmNsdWRlPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gc3RyaW5nIHByb3BlcnR5XFxcIj4mbHQ7c3RkaW8uaD48L3NwYW4+PC9zcGFuPlxcblxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5pbnQ8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBmdW5jdGlvblxcXCI+bWFpbjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnZvaWQ8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+ezwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGNvbW1lbnRcXFwiPi8vIENyZWFtb3MgdW5hIGluc3RhbmNpYSBkZSBsYSBjbGFzZSBNeUNsYXNzIGUgaW52b2NhbW9zIGFsIGN0b3I8L3NwYW4+XFxuICAgIE15Q2xhc3Mgb2JqZWN0PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPk15Q2xhc3NfY3Rvcjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4mYW1wOzwvc3Bhbj5vYmplY3Q8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPiw8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBudW1iZXJcXFwiPjM8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4sPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gbnVtYmVyXFxcIj4yNTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcblxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+aW50PC9zcGFuPiB0bXAgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj49PC9zcGFuPiBvYmplY3Q8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPi48L3NwYW4+cHJpdmF0ZV9tZW1iZXJzPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4tPjwvc3Bhbj5iPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8gb29wcywgZXJyb3IsIHRpcG8gaW5jb21wbGV0bzwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGZ1bmN0aW9uXFxcIj5wcmludGY8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBzdHJpbmdcXFwiPlxcXCJDIHZhbGU6ICVkXFxcIjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPiw8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBmdW5jdGlvblxcXCI+TXlDbGFzc19nZXRfYzwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4mYW1wOzwvc3Bhbj5vYmplY3Q8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGZ1bmN0aW9uXFxcIj5NeUNsYXNzX2R0b3I8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+JmFtcDs8L3NwYW4+b2JqZWN0PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPn08L3NwYW4+XFxuPC9jb2RlPjwvcHJlPlxcbjxwPkNvbW8gc2UgcHVlZGUgdmVyLCBubyBlcyB0YW4gY29tcGxpY2FkbyByZWFsaXphciBlc3RvLCBxdWl6w6EgdW4gcG9jbyByZXBldGl0aXZvLCBzaW4gZW1iYXJnbywgaGF5IHVuYSBjdWVzdGnDs24sIGVzcGVybyBxdWUgbGEgaGF5YXMgbm90YWRvIDspLjwvcD5cXG48cD7CoTxzdHJvbmc+TWFsbG9jPC9zdHJvbmc+IHNvbG8gcGFyYSBpbXBsZW1lbnRhciB2YXJpYWJsZXMgcHJpdmFkYXMhIPCfmLE8L3A+XFxuPHA+Q2FsbWEsIHF1ZSBzZSBwdWVkZSBpbXBsZW1lbnRhciBkZSBvdHJhIGZvcm1hLCBwb2RlbW9zIHRlbmVyIHVuIGJ1ZmZlciBsb2NhbCBkZSBtZW1vcmlhIGRlbCB0YW1hw7FvIHF1ZSBuZWNlc2l0ZW1vcyBwYXJhXFxubGFzIHZhcmlhYmxlcyBwcml2YWRhcywgbyBjb25maWFyIHkgdXRpbGl6YXIgdW5hIGNvbnZlbmNpw7NuIHBhcmEgbGFzIHZhcmlhYmxlcyBwcml2YWRhcyAocGVyc29uYWxtZW50ZSBjcmVvIHF1ZSBlc3RvIMO6bHRpbW8gZXMgbG8gbWVqb3IpLjwvcD5cXG48aDEgaWQ9XFxcImhlcmVuY2lhXFxcIj48YSBpZD1cXFwidXNlci1jb250ZW50LWhlcmVuY2lhXFxcIiBjbGFzcz1cXFwiYW5jaG9yXFxcIiBocmVmPVxcXCIjaGVyZW5jaWFcXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIj48c3ZnIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwib2N0aWNvbiBvY3RpY29uLWxpbmtcXFwiIGhlaWdodD1cXFwiMTZcXFwiIHZlcnNpb249XFxcIjEuMVxcXCIgdmlld2JveD1cXFwiMCAwIDE2IDE2XFxcIiB3aWR0aD1cXFwiMTZcXFwiPjxwYXRoIGQ9XFxcIk00IDloMXYxSDRjLTEuNSAwLTMtMS42OS0zLTMuNVMyLjU1IDMgNCAzaDRjMS40NSAwIDMgMS42OSAzIDMuNSAwIDEuNDEtLjkxIDIuNzItMiAzLjI1VjguNTljLjU4LS40NSAxLTEuMjcgMS0yLjA5QzEwIDUuMjIgOC45OCA0IDggNEg0Yy0uOTggMC0yIDEuMjItMiAyLjVTMyA5IDQgOXptOS0zaC0xdjFoMWMxIDAgMiAxLjIyIDIgMi41UzEzLjk4IDEyIDEzIDEySDljLS45OCAwLTItMS4yMi0yLTIuNSAwLS44My40Mi0xLjY0IDEtMi4wOVY2LjI1Yy0xLjA5LjUzLTIgMS44NC0yIDMuMjVDNiAxMS4zMSA3LjU1IDEzIDkgMTNoNGMxLjQ1IDAgMy0xLjY5IDMtMy41UzE0LjUgNiAxMyA2elxcXCI+PC9wYXRoPjwvc3ZnPjwvYT5IZXJlbmNpYTwvaDE+XFxuPGJsb2NrcXVvdGU+XFxuPHA+RXMgdW4gbWVjYW5pc21vIHBhcmEgcGVybWl0aXIgcXVlIHVuYSBjbGFzZSBYIHNlIGJhc2UgZW4gb3RyYSBjbGFzZSBZLCBlc3RhYmxlY2llbmRvIHVuYSByZWxhY2nDs24gJnF1b3Q7WCBlcyBzdWJjbGFzZSBkZSBZJnF1b3Q7PC9wPlxcbjwvYmxvY2txdW90ZT5cXG48YmxvY2txdW90ZT5cXG4gICAgPGkgY2xhc3M9XFxcInYtaWNvbiBtZGkgbWRpLWFsZXJ0XFxcIiBzdHlsZT1cXFwiY29sb3I6IHllbGxvdzsgZm9udC1zaXplOiAyZW1cXFwiPjwvaT4gT3BpbmnDs24gXFxuICAgPGJyPlxcbiAgICA8cD5ObyBzb3kgcGFydGlkYXJpbyBkZSBhYnVzYXIgZGUgbGEgaGVyZW5jaWEsIHB1ZXMgY3JlbyBxdWUgcHVlZGUgZGFyIGx1Z2FyIGEgY8OzZGlnbyBtdXkgY29tcGxlam8geSBkaWbDrWNpbCBkZSBtYW50ZW5lcjwvcD5cXG48L2Jsb2NrcXVvdGU+XFxuPHA+TGEgaGVyZW5jaWEgY29uc2lzdGUgZW4gY3JlYXIgbnVldmFzIGNsYXNlcyBxdWUgcGFydGFuIGRlIGNsYXNlcyB5YSBleGlzdGVudGVzLCBkZSBtYW5lcmEgcXVlIHRpZW5lbiB0b2RhcyBsYXMgcHJvcGllZGFkZXMgeSBtw6l0b2RvcyBkZSBsYSBjbGFzZSBwYWRyZTsgaW1wbGVtZW50YXJcXG5lc3RvIGVuIEMgdGFtcG9jbyBzdXBvbmUgZGlmaWN1bHRhZCBhbGd1bmEsIGF1bnF1ZSBzaWVuZG8gZXN0cmljdG9zLCBsbyBpbXBsZW1lbnRhbW9zIHV0aWxpemFuZG8gbGEgY29tcG9zaWNpw7NuLjwvcD5cXG48cHJlIGNsYXNzPVxcXCJsYW5ndWFnZS1jcHBcXFwiPjxjb2RlIGNsYXNzPVxcXCJsYW5ndWFnZS1jcHBcXFwiPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5zdHJ1Y3Q8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjbGFzcy1uYW1lXFxcIj5PYmplY3Q8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj57PC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+aW50PC9zcGFuPiB4PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+aW50PC9zcGFuPiB5PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+fTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuXFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnN0cnVjdDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGNsYXNzLW5hbWVcXFwiPjJkQm94PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPjo8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5wdWJsaWM8L3NwYW4+IE9iamVjdFxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+ezwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmludDwvc3Bhbj4gd2lkdGg8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5pbnQ8L3NwYW4+IGhlaWdodDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPn08L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjwvY29kZT48L3ByZT5cXG48cD5FbiBDIGVzdG8gc2UgdHJhZHVjZSBlbjo8L3A+XFxuPHByZSBjbGFzcz1cXFwibGFuZ3VhZ2UtY1xcXCI+PGNvZGUgY2xhc3M9XFxcImxhbmd1YWdlLWNcXFwiPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj50eXBlZGVmPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+c3RydWN0PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+ezwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmludDwvc3Bhbj4geDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmludDwvc3Bhbj4geTxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPn08L3NwYW4+IE9iamVjdDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+dHlwZWRlZjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnN0cnVjdDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGNsYXNzLW5hbWVcXFwiPjJkQm94PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+ezwvc3Bhbj5cXG4gICAgT2JqZWN0IHN1cGVyPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8gY2xhc2UgYmFzZTwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmludDwvc3Bhbj4gd2lkdGg8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5pbnQ8L3NwYW4+IGhlaWdodDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPn08L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBudW1iZXJcXFwiPjI8L3NwYW4+ZEJveDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG48L2NvZGU+PC9wcmU+XFxuPHA+wr9Dw7NtbyBzZSB2ZSBsYSBlc3RydWN0dXJhIDxjb2RlPjJkQm94PC9jb2RlPiBlbiBtZW1vcmlhPywgcHVlcyBkZSBsYSBzaWd1aWVudGUgbWFuZXJhIChzaW4gY29udGFyIHBhZGRpbmcsIGFsaWdubWVudCBuaSB0YW1hw7FvIGRlIGxvcyB0aXBvcyBkZSBkYXRvKS48L3A+XFxuPHA+PGltZyBzcmM9XFxcIi9pbWFnZXMvYmxvZy9vb3BfYy9tZW1fbGF5b3V0LnBuZ1xcXCIgYWx0PVxcXCJMYXlvdXQgZW4gbWVtb3JpYVxcXCI+PC9wPlxcbjxwPkNvbiBsYSBpbWFnZW4gYW50ZXJpb3IgcG9kZW1vcyBvYnNlcnZhciBxdWUgbGFzIHByb3BpZWRhZGVzIGRlIGxhIGNsYXNlIE9iamVjdCB2YW4gYW50ZXMgcXVlIGN1YWxxdWllciBwcm9waWVkYWQgZGUgbGEgY2xhc2UgMmRCb3gsIGJpZW4gcG9kcsOtYW1vcyBwb25lcmxhIGVuIGN1YWxxdWllciBvcmRlbixcXG5wZXJvIHBvciBjdWVzdGnDs24gZGUgZXN0w6l0aWNhIGxhcyBwb25kcmVtb3MgYWwgcHJpbmNpcGlvLjwvcD5cXG48cD5IYXN0YSBhcXXDrSB0b2RvIGJpZW4sIGFzw60gcXVlIGxhIGhlcmVuY2lhIHNlIHB1ZWRlIHJlc3VtaXIgZGUgbGEgc2lndWllbnRlIG1hbmVyYS48L3A+XFxuPGJsb2NrcXVvdGU+XFxuPHA+UGFyYSBoZXJlZGFyIGRlIG90cmFzIGNsYXNlcyB0ZW5lbW9zIHF1ZSByZWN1cnJpciBhIGxhIGNvbXBvc2ljacOzbjwvcD5cXG48L2Jsb2NrcXVvdGU+XFxuPHA+QcO6biBoYXkgdW4gYXNwZWN0byBxdWUgbm8gaGVtb3MgdG9jYWRvLCDCoWxhIHNvYnJlY2FyZ2EgZGUgbcOpdG9kb3MgeSBsb3MgZHRvciB2aXJ0dWFsZXMhPC9wPlxcbjxoMSBpZD1cXFwicG9saW1vcmZpc21vXFxcIj48YSBpZD1cXFwidXNlci1jb250ZW50LXBvbGltb3JmaXNtb1xcXCIgY2xhc3M9XFxcImFuY2hvclxcXCIgaHJlZj1cXFwiI3BvbGltb3JmaXNtb1xcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjxzdmcgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJvY3RpY29uIG9jdGljb24tbGlua1xcXCIgaGVpZ2h0PVxcXCIxNlxcXCIgdmVyc2lvbj1cXFwiMS4xXFxcIiB2aWV3Ym94PVxcXCIwIDAgMTYgMTZcXFwiIHdpZHRoPVxcXCIxNlxcXCI+PHBhdGggZD1cXFwiTTQgOWgxdjFINGMtMS41IDAtMy0xLjY5LTMtMy41UzIuNTUgMyA0IDNoNGMxLjQ1IDAgMyAxLjY5IDMgMy41IDAgMS40MS0uOTEgMi43Mi0yIDMuMjVWOC41OWMuNTgtLjQ1IDEtMS4yNyAxLTIuMDlDMTAgNS4yMiA4Ljk4IDQgOCA0SDRjLS45OCAwLTIgMS4yMi0yIDIuNVMzIDkgNCA5em05LTNoLTF2MWgxYzEgMCAyIDEuMjIgMiAyLjVTMTMuOTggMTIgMTMgMTJIOWMtLjk4IDAtMi0xLjIyLTItMi41IDAtLjgzLjQyLTEuNjQgMS0yLjA5VjYuMjVjLTEuMDkuNTMtMiAxLjg0LTIgMy4yNUM2IDExLjMxIDcuNTUgMTMgOSAxM2g0YzEuNDUgMCAzLTEuNjkgMy0zLjVTMTQuNSA2IDEzIDZ6XFxcIj48L3BhdGg+PC9zdmc+PC9hPlBvbGltb3JmaXNtbzwvaDE+XFxuPHA+QW50ZXMgZGUgZW50cmFyIGEgZXN0bywgdm95IGEgZXhwbGljYXIgcXVlIHNvbiBsb3MgYXB1bnRhZG9yZXMgYSBmdW5jaW9ucywgY29tbyBkZWNsYXJhciB1bm8geSBjb21vIHVzYXJsb3MsIHBvc3Rlcmlvcm1lbnRlIGV4cGxpY2Fyw6kgbG8gcXVlIGVzIHVuYSB2dGFibGUuPC9wPlxcbjxoMyBpZD1cXFwiYXB1bnRhZG9yZXMtYS1mdW5jaW9uZXNcXFwiPjxhIGlkPVxcXCJ1c2VyLWNvbnRlbnQtYXB1bnRhZG9yZXMtYS1mdW5jaW9uZXNcXFwiIGNsYXNzPVxcXCJhbmNob3JcXFwiIGhyZWY9XFxcIiNhcHVudGFkb3Jlcy1hLWZ1bmNpb25lc1xcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjxzdmcgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiIGNsYXNzPVxcXCJvY3RpY29uIG9jdGljb24tbGlua1xcXCIgaGVpZ2h0PVxcXCIxNlxcXCIgdmVyc2lvbj1cXFwiMS4xXFxcIiB2aWV3Ym94PVxcXCIwIDAgMTYgMTZcXFwiIHdpZHRoPVxcXCIxNlxcXCI+PHBhdGggZD1cXFwiTTQgOWgxdjFINGMtMS41IDAtMy0xLjY5LTMtMy41UzIuNTUgMyA0IDNoNGMxLjQ1IDAgMyAxLjY5IDMgMy41IDAgMS40MS0uOTEgMi43Mi0yIDMuMjVWOC41OWMuNTgtLjQ1IDEtMS4yNyAxLTIuMDlDMTAgNS4yMiA4Ljk4IDQgOCA0SDRjLS45OCAwLTIgMS4yMi0yIDIuNVMzIDkgNCA5em05LTNoLTF2MWgxYzEgMCAyIDEuMjIgMiAyLjVTMTMuOTggMTIgMTMgMTJIOWMtLjk4IDAtMi0xLjIyLTItMi41IDAtLjgzLjQyLTEuNjQgMS0yLjA5VjYuMjVjLTEuMDkuNTMtMiAxLjg0LTIgMy4yNUM2IDExLjMxIDcuNTUgMTMgOSAxM2g0YzEuNDUgMCAzLTEuNjkgMy0zLjVTMTQuNSA2IDEzIDZ6XFxcIj48L3BhdGg+PC9zdmc+PC9hPkFwdW50YWRvcmVzIGEgZnVuY2lvbmVzPC9oMz5cXG48cD5Mb3MgYXB1bnRhZG9yZXMgYSBmdW5jaW9uZXMgKGZ1bmN0aW9uIHBvaW50ZXJzKSBzb24gdW4gdGlwbyBlc3BlY2lhbCBkZSBhcHVudGFkb3JlcyBxdWUgdGllbmVuIGxhIGNhcmFjdGVyw61zdGljYSBkZSBhcHVudGFyXFxuYSB1bmEgZnVuY2nDs24geSBwYXJhIGxsYW1hciBhIGxhIGZ1bmNpw7NuIGEgbGEgcXVlIGFwdW50YW4sIGxvcyB1c2Ftb3MgY29tbyBzaSBmdWVyYSB1bmEgZnVuY2nDs24uPC9wPlxcbjxwPkxhIHNpbnRheGlzIHBhcmEgZGVjbGFyYXIgdW4gYXB1bnRhZG9yIGEgZnVuY2nDs24gZXMgbGEgc2lndWllbnRlIChsbyBzZSwgZXMgZmVhKS48L3A+XFxuPHByZT48Y29kZT5bdGlwbyBkZSByZXRvcm5vXSAoKm5vbWJyZSBkZSBsYSB2YXJpYWJsZSkocGFyYW1ldHJvcy4uLik7XFxuPC9jb2RlPjwvcHJlPlxcbjxwPlkgdW4gdXNvIGRlIGVzdG9zIHNlcsOtYSBlbCBzaWd1aWVudGU6PC9wPlxcbjxwcmUgY2xhc3M9XFxcImxhbmd1YWdlLWNcXFwiPjxjb2RlIGNsYXNzPVxcXCJsYW5ndWFnZS1jXFxcIj48c3BhbiBjbGFzcz1cXFwidG9rZW4gbWFjcm8gcHJvcGVydHlcXFwiPiM8c3BhbiBjbGFzcz1cXFwidG9rZW4gZGlyZWN0aXZlIHByb3BlcnR5XFxcIj5pbmNsdWRlPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gc3RyaW5nIHByb3BlcnR5XFxcIj4mbHQ7c3RkaW8uaD48L3NwYW4+PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5pbnQ8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBmdW5jdGlvblxcXCI+c3F1YXJlPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+aW50PC9zcGFuPiBwYXJhbTxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPns8L3NwYW4+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5yZXR1cm48L3NwYW4+IHBhcmFtIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+Kjwvc3Bhbj4gcGFyYW08c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj59PC9zcGFuPlxcblxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5pbnQ8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBmdW5jdGlvblxcXCI+bWFpbjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnZvaWQ8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+ezwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmludDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+Kjwvc3Bhbj5teV9mdW5jX3B0cjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmludDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+PTwvc3Bhbj4gc3F1YXJlPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8gbG8gYXNpZ25hbW9zIGEgbGEgZnVuY2nDs248L3NwYW4+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBjb21tZW50XFxcIj4vLyB0YW1iacOpbiBwb2RlbW9zIGFzaWduYXJsbyBhcXXDrSBkZSBsYSBzaWd1aWVudGUgbWFuZXJhOjwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGNvbW1lbnRcXFwiPi8vIG15X2Z1bmNfcHRyID0gJmFtcDtzcXVhcmU7PC9zcGFuPlxcblxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPnByaW50Zjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHN0cmluZ1xcXCI+XFxcIiVkXFxcIjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPiw8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBmdW5jdGlvblxcXCI+bXlfZnVuY19wdHI8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBudW1iZXJcXFwiPjg8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj59PC9zcGFuPlxcbjwvY29kZT48L3ByZT5cXG48cD5MbyBidWVubyBlcyBxdWUgcG9kZW1vcyB1dGlsaXphciB0eXBlZGVmcyBwYXJhIGhhY2VybG9zIG3DoXMgYm9uaXRvcyBjOjwvcD5cXG48cHJlIGNsYXNzPVxcXCJsYW5ndWFnZS1jXFxcIj48Y29kZSBjbGFzcz1cXFwibGFuZ3VhZ2UtY1xcXCI+PHNwYW4gY2xhc3M9XFxcInRva2VuIG1hY3JvIHByb3BlcnR5XFxcIj4jPHNwYW4gY2xhc3M9XFxcInRva2VuIGRpcmVjdGl2ZSBwcm9wZXJ0eVxcXCI+aW5jbHVkZTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIHN0cmluZyBwcm9wZXJ0eVxcXCI+Jmx0O21hdGguaD48L3NwYW4+PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj50eXBlZGVmPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+ZG91YmxlPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPkZ1bmNQdHI8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5kb3VibGU8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+aW50PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPm1haW48L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj52b2lkPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPns8L3NwYW4+XFxuICAgIEZ1bmNQdHIgZnB0ciA8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPj08L3NwYW4+IHNpbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGNvbW1lbnRcXFwiPi8vIFlhIG5vIGVzdGEgZmVvIDpEPC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+fTwvc3Bhbj5cXG48L2NvZGU+PC9wcmU+XFxuPHA+TG9zIGFwdW50YWRvcmVzIGEgZnVuY2lvbmVzIHNvbiBtdXkgw7p0aWxlcyBjdWFuZG8gc2UgZGVzZWFuIGltcGxlbWVudGFyIGNhbGxiYWNrcyBvIHBlcnNvbmFsaXphciBlbCBjb21wb3J0YW1pZW50byBkZSB1bmEgZnVuY2nDs24gKHBvciBlamVtcGxvLCA8YSBocmVmPVxcXCJodHRwczovL2VuLmNwcHJlZmVyZW5jZS5jb20vdy9jL2FsZ29yaXRobS9xc29ydFxcXCI+cXNvcnQ8L2E+KS48L3A+XFxuPGgzIGlkPVxcXCJ2aXJ0dWFsLW1ldGhvZC10YWJsZVxcXCI+PGEgaWQ9XFxcInVzZXItY29udGVudC12aXJ0dWFsLW1ldGhvZC10YWJsZVxcXCIgY2xhc3M9XFxcImFuY2hvclxcXCIgaHJlZj1cXFwiI3ZpcnR1YWwtbWV0aG9kLXRhYmxlXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PHN2ZyBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcIm9jdGljb24gb2N0aWNvbi1saW5rXFxcIiBoZWlnaHQ9XFxcIjE2XFxcIiB2ZXJzaW9uPVxcXCIxLjFcXFwiIHZpZXdib3g9XFxcIjAgMCAxNiAxNlxcXCIgd2lkdGg9XFxcIjE2XFxcIj48cGF0aCBkPVxcXCJNNCA5aDF2MUg0Yy0xLjUgMC0zLTEuNjktMy0zLjVTMi41NSAzIDQgM2g0YzEuNDUgMCAzIDEuNjkgMyAzLjUgMCAxLjQxLS45MSAyLjcyLTIgMy4yNVY4LjU5Yy41OC0uNDUgMS0xLjI3IDEtMi4wOUMxMCA1LjIyIDguOTggNCA4IDRINGMtLjk4IDAtMiAxLjIyLTIgMi41UzMgOSA0IDl6bTktM2gtMXYxaDFjMSAwIDIgMS4yMiAyIDIuNVMxMy45OCAxMiAxMyAxMkg5Yy0uOTggMC0yLTEuMjItMi0yLjUgMC0uODMuNDItMS42NCAxLTIuMDlWNi4yNWMtMS4wOS41My0yIDEuODQtMiAzLjI1QzYgMTEuMzEgNy41NSAxMyA5IDEzaDRjMS40NSAwIDMtMS42OSAzLTMuNVMxNC41IDYgMTMgNnpcXFwiPjwvcGF0aD48L3N2Zz48L2E+VmlydHVhbCBtZXRob2QgdGFibGU8L2gzPlxcbjxwPlRhbWJpw6luIGxsYW1hZGEgdnRhYmxlLCBlcyB1bmEgZm9ybWEgZGUgcGVybWl0aXIgbGFzIGZ1bmNpb25lcyB2aXJ0dWFsZXMgKDxlbT5keW5hbWljIGRpc3BhdGNoPC9lbT4pLCBlcyBtdXkgdXRpbGl6YWRhIGVuIG11Y2hvcyBsZW5ndWFqZXMsXFxuZGUgbWFuZXJhIHNlbmNpbGxhLCBjb25zaXN0ZSBlbiB1bmEgdGFibGEgcXVlIGNvbnRpZW5lIGFwdW50YWRvcmVzIGEgbG9zIG3DqXRvZG9zIHF1ZSBzZSBkZWJlbiBsbGFtYXIgcGFyYSBkZXRlcm1pbmFkYSBpbnN0YW5jaWEsIGRlIGVzdGEgbWFuZXJhXFxuc2Ugc2FiZSBjdcOhbCBmdW5jacOzbiB2aXJ0dWFsIGxsYW1hci48L3A+XFxuPHA+RXMgaW1wb3J0YW50ZSBtZW5jaW9uYXIgcXVlIHVuYSB2dGFibGUgPGVtPmVzIGxhIG1pc21hPC9lbT4gcGFyYSBvYmpldG9zIGRlbCBtaXNtbyB0aXBvLCBwb3IgbG8gcXVlIHNlIHB1ZWRlIGNvbXBhcnRpciBlbnRyZSB0b2RhcyBsYXMgaW5zdGFuY2lhcyBkZSBkZXRlcm1pbmFkYSBjbGFzZS48L3A+XFxuPHA+VW4gZWplbXBsbyBkZSB2dGFibGUgcGFyYSBsYSBzaWd1aWVudGUgY2xhc2UgKEMrKyk6PC9wPlxcbjxwcmUgY2xhc3M9XFxcImxhbmd1YWdlLWNwcFxcXCI+PGNvZGUgY2xhc3M9XFxcImxhbmd1YWdlLWNwcFxcXCI+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmNsYXNzPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY2xhc3MtbmFtZVxcXCI+SGV5PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+ezwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+cHVibGljPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+Ojwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnZpcnR1YWw8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+fjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPkhleTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPj08L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5kZWZhdWx0PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnZpcnR1YWw8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj52b2lkPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPmZvbzwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPj08L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBudW1iZXJcXFwiPjA8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcblxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+dmlydHVhbDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnZvaWQ8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBmdW5jdGlvblxcXCI+aGV5PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+PTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIG51bWJlclxcXCI+MDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj59PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG5cXG48L2NvZGU+PC9wcmU+XFxuPGRpdiBzdHlsZT1cXFwib3ZlcmZsb3cteDogYXV0bztcXFwiPlxcbnxNw6l0b2RvICAgICAgICAgICAgIHxGdW5jacOzbiBxdWUgcmVhbGl6YSBlc2UgcHJvY2Vzb3xcXG58LS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxcbnxIZXlfZHRvciAgICAgICAgICAgfDB4MTIzRURGQUEgICAgICAgICAgICAgICAgICAgICB8XFxufEhleV9mb28gICAgICAgICAgICB8MHgwMDAwMDAwMCAgICAgICAgICAgICAgICAgICAgIHxcXG58SGV5X2hleSAgICAgICAgICAgIHwweDAwMDAwMDAwICAgICAgICAgICAgICAgICAgICAgfFxcbjwvZGl2ZT5cXG5Ob3RhOiBsYSBmdW5jacOzbiBlcyBsYSBkaXJlY2Npw7NuIGRlIGxhIGZ1bmNpw7NuIHF1ZSByZWFsaXphcsOhIGVzZSBwcm9jZXNvLCBwdWVzdG8gcXVlIG5vIHRpZW5lbiBpbXBsZW1lbnRhY2nDs24gKGEgZXhjZXBjacOzbiBkZWwgZHRvcikgZW50b25jZXMgbm8gZGViZW4gYXB1bnRhciBhIHVuYSBkaXJlY2Npw7NuIHbDoWxpZGEuXFxuPHA+QWhvcmEgdmVhbW9zIGEgbGEgc2lndWllbnRlIGNsYXNlPC9wPlxcbjxwcmUgY2xhc3M9XFxcImxhbmd1YWdlLWNwcFxcXCI+PGNvZGUgY2xhc3M9XFxcImxhbmd1YWdlLWNwcFxcXCI+PHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPmNsYXNzPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY2xhc3MtbmFtZVxcXCI+Rm9vPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPjo8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5wdWJsaWM8L3NwYW4+IEhleVxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+ezwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+cHVibGljPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+Ojwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnZpcnR1YWw8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+fjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPkZvbzwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPj08L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj5kZWZhdWx0PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnZvaWQ8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBmdW5jdGlvblxcXCI+Zm9vPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+IG92ZXJyaWRlPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj57PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+fTwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnZvaWQ8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBmdW5jdGlvblxcXCI+aGV5PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+IG92ZXJyaWRlPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj57PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+fTwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPn08L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjwvY29kZT48L3ByZT5cXG48cD5TdSB2dGFibGUgc2Vyw61hIGxhIHNpZ3VpZW50ZSAoZGlyZWNjaW9uZXMgZGUgbWVtb3JpYSBzb2xvIHBhcmEgZGVtb3N0cmFjacOzbiwgbm8gcmVmbGVqYW4gZGlyZWNjaW9uZXMgcmVhbGVzKTo8L3A+XFxuPHRhYmxlPlxcbjx0aGVhZD5cXG48dHI+XFxuPHRoPk3DqXRvZG88L3RoPlxcbjx0aD5GdW5jacOzbiBxdWUgcmVhbGl6YSBlc2UgcHJvY2VzbzwvdGg+XFxuPC90cj5cXG48L3RoZWFkPlxcbjx0Ym9keT5cXG48dHI+XFxuPHRkPkZvb19kdG9yPC90ZD5cXG48dGQ+MHgxMjNFREZBQTwvdGQ+XFxuPC90cj5cXG48dHI+XFxuPHRkPkZvb19mb288L3RkPlxcbjx0ZD4weEFGRTIzNDAwPC90ZD5cXG48L3RyPlxcbjx0cj5cXG48dGQ+Rm9vX2hleTwvdGQ+XFxuPHRkPjB4RkYyMzQwMEU8L3RkPlxcbjwvdHI+XFxuPC90Ym9keT5cXG48L3RhYmxlPlxcbjxwPlB1ZXN0byBxdWUgZXN0YSBjbGFzZSB5YSBpbXBsZW1lbnRhIHRvZG9zIGxvcyBtw6l0b2RvcywgZW50b25jZXMgeWEgYXB1bnRhbiBhIGRpcmVjY2lvbmVzIHbDoWxpZGFzIChxdWUgc2VhbiBmdW5jaW9uZXMpLjwvcD5cXG48cD5WYSB2YSwgcGVybyDCv2PDs21vIGltcGxlbWVudG8gPHN0cm9uZz5lc3RvPC9zdHJvbmc+IGVuIEM/PC9wPlxcbjxwPsK/UmVjdWVyZGFzIGxvIGRlIGFwdW50YWRvcmVzIGEgZnVuY2lvbmVzPywgcHVlcyBsb3MgdmFtb3MgYSB1dGlsaXphci48L3A+XFxuPHA+SW50cm9kdWNpcmVtb3MgdW5hIGVzdHJ1Y3R1cmEgcXVlIGN1bXBsYSBjb24gZXNlIHByb3Bvc2l0bzo8L3A+XFxuPHByZSBjbGFzcz1cXFwibGFuZ3VhZ2UtY1xcXCI+PGNvZGUgY2xhc3M9XFxcImxhbmd1YWdlLWNcXFwiPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj50eXBlZGVmPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+c3RydWN0PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY2xhc3MtbmFtZVxcXCI+SGV5X1Z0YWJsZTwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPns8L3NwYW4+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj52b2lkPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPkNsYXNzX2R0b3I8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPkhleSA8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPio8L3NwYW4+c2VsZjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj52b2lkPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPkhleV9mb288c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPkhleSA8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPio8L3NwYW4+c2VsZjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj52b2lkPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPkhleV9oZXk8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPkhleSA8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPio8L3NwYW4+c2VsZjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj59PC9zcGFuPiBIZXlfVnRhYmxlPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcblxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj50eXBlZGVmPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+c3RydWN0PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY2xhc3MtbmFtZVxcXCI+SGV5PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+ezwvc3Bhbj5cXG4gICAgSGV5X1Z0YWJsZSA8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPio8L3NwYW4+dnRhYmxlPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+fTwvc3Bhbj4gSGV5PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjwvY29kZT48L3ByZT5cXG48cD7Cv0RlYmVtb3MgaW1wbGVtZW50YXIgdW5hIGVzdHJ1Y3R1cmEgc2ltaWxhciBwYXJhIEZvbz8sIG5vLCA8c3Ryb25nPmEgbWVub3M8L3N0cm9uZz4gcXVlIGVzdGEgY2xhc2UgdGVuZ2EgbcOhcyBmdW5jaW9uZXMgdmlydHVhbGVzLCBvIHV0aWxpemFyIDxhIGhyZWY9XFxcImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1R5cGVfcHVubmluZ1xcXCI+PGVtPnR5cGUgcHVubmluZzwvZW0+PC9hPi48L3A+XFxuPHByZSBjbGFzcz1cXFwibGFuZ3VhZ2UtY1xcXCI+PGNvZGUgY2xhc3M9XFxcImxhbmd1YWdlLWNcXFwiPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj52b2lkPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPkhleV9kdG9yPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj5IZXkgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPnNlbGY8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj57PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+fTwvc3Bhbj5cXG5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+dm9pZDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGZ1bmN0aW9uXFxcIj5IZXlfY3Rvcjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+SGV5IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+Kjwvc3Bhbj5zZWxmPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+ezwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnN0YXRpYzwvc3Bhbj4gSGV5X1Z0YWJsZSA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+Y29uc3Q8L3NwYW4+IHZ0YmwgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj49PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPns8L3NwYW4+XFxuICAgICAgICBIZXlfZHRvcjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+LDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGNvbW1lbnRcXFwiPi8vIGRlc3RydWN0b3I8L3NwYW4+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY29uc3RhbnRcXFwiPk5VTEw8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4sPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8gZm9vPC9zcGFuPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGNvbnN0YW50XFxcIj5OVUxMPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8gaGV5PC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPn08L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbiAgICBzZWxmPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4tPjwvc3Bhbj52dGFibGUgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj49PC9zcGFuPiB2dGJsPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+fTwvc3Bhbj5cXG48L2NvZGU+PC9wcmU+XFxuPHA+wqFHZW5pYWwhLCB5YSBwb2RlbW9zIGludm9jYXIgYWwgZHRvciBkZSBsYSBzaWd1aWVudGUgbWFuZXJhOiA8Y29kZT5oZXkudnRhYmxlLSZndDtDbGFzc19kdG9yKCZhbXA7aGV5KTwvY29kZT4uPC9wPlxcbjxwPkFob3JhLCByZWFsaWNlbW9zIGxhIGltcGxlbWVudGFjacOzbiBwYXJhIEZvbzo8L3A+XFxuPHByZSBjbGFzcz1cXFwibGFuZ3VhZ2UtY1xcXCI+PGNvZGUgY2xhc3M9XFxcImxhbmd1YWdlLWNcXFwiPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj50eXBlZGVmPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+c3RydWN0PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY2xhc3MtbmFtZVxcXCI+Rm9vPC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+ezwvc3Bhbj5cXG4gICAgSGV5IGJhc2U8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj59PC9zcGFuPiBGb288c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPjs8L3NwYW4+XFxuXFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnZvaWQ8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBmdW5jdGlvblxcXCI+Rm9vX2R0b3I8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPkZvbyA8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPio8L3NwYW4+c2VsZjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPns8L3NwYW4+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBmdW5jdGlvblxcXCI+SGV5X2R0b3I8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPnNlbGY8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPi0+PC9zcGFuPmJhc2U8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+fTwvc3Bhbj5cXG5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+dm9pZDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGZ1bmN0aW9uXFxcIj5Gb29fZm9vPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj5Gb28gPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPnNlbGY8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+ezwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPn08L3NwYW4+XFxuXFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnZvaWQ8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBmdW5jdGlvblxcXCI+Rm9vX2hleTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+Rm9vIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+Kjwvc3Bhbj5zZWxmPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPns8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj59PC9zcGFuPlxcblxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj52b2lkPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPkZvb19jdG9yPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj5Gb28gPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPnNlbGY8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj57PC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4gZnVuY3Rpb25cXFwiPkhleV9jdG9yPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPiZhbXA7PC9zcGFuPnNlbGY8c3BhbiBjbGFzcz1cXFwidG9rZW4gb3BlcmF0b3JcXFwiPi0+PC9zcGFuPnN1cGVyPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnN0YXRpYzwvc3Bhbj4gSGV5X1Z0YWJsZSA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+Y29uc3Q8L3NwYW4+IHZ0YmwgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj49PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPns8L3NwYW4+XFxuICAgICAgICBGb29fZHRvcjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+LDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGNvbW1lbnRcXFwiPi8vIGRlc3RydWN0b3I8L3NwYW4+XFxuICAgICAgICBGb29fZm9vPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4sPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8gZm9vPC9zcGFuPlxcbiAgICAgICAgRm9vX2hleSA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8gaGV5PC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPn08L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbiAgICBzZWxmPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4tPjwvc3Bhbj5iYXNlPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4tPjwvc3Bhbj52dGFibGUgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj49PC9zcGFuPiB2dGJsPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+fTwvc3Bhbj5cXG48L2NvZGU+PC9wcmU+XFxuPHA+WSBwYXJhIGxsYW1hciBjdWFscXVpZXIgbcOpdG9kbyBsbyBoYWNlbW9zIGRlIGxhIG1pc21hIG1hbmVyYSBxdWUgY29uIGVsIGR0b3IuPC9wPlxcbjxwPkhheSB1bmEgY29zYSBxdWUgbm8gaGVtb3MgZGlzY3V0aWRvOiBlbCA8ZW0+Y2FzdGluZzwvZW0+IGRlIGNsYXNlcyBoaWphcyBhIHBhZHJlcyB5IGRlIHBhZHJlcyBhIGhpamFzLCBhIGNvbnRpbnVhY2nDs24sIGVzdMOhbiBsYXMgb3BjaW9uZXMgcGFyYSBoYWNlcmxvLjwvcD5cXG48aDMgaWQ9XFxcImhpamEtYS1wYWRyZVxcXCI+PGEgaWQ9XFxcInVzZXItY29udGVudC1oaWphLWEtcGFkcmVcXFwiIGNsYXNzPVxcXCJhbmNob3JcXFwiIGhyZWY9XFxcIiNoaWphLWEtcGFkcmVcXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIj48c3ZnIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwib2N0aWNvbiBvY3RpY29uLWxpbmtcXFwiIGhlaWdodD1cXFwiMTZcXFwiIHZlcnNpb249XFxcIjEuMVxcXCIgdmlld2JveD1cXFwiMCAwIDE2IDE2XFxcIiB3aWR0aD1cXFwiMTZcXFwiPjxwYXRoIGQ9XFxcIk00IDloMXYxSDRjLTEuNSAwLTMtMS42OS0zLTMuNVMyLjU1IDMgNCAzaDRjMS40NSAwIDMgMS42OSAzIDMuNSAwIDEuNDEtLjkxIDIuNzItMiAzLjI1VjguNTljLjU4LS40NSAxLTEuMjcgMS0yLjA5QzEwIDUuMjIgOC45OCA0IDggNEg0Yy0uOTggMC0yIDEuMjItMiAyLjVTMyA5IDQgOXptOS0zaC0xdjFoMWMxIDAgMiAxLjIyIDIgMi41UzEzLjk4IDEyIDEzIDEySDljLS45OCAwLTItMS4yMi0yLTIuNSAwLS44My40Mi0xLjY0IDEtMi4wOVY2LjI1Yy0xLjA5LjUzLTIgMS44NC0yIDMuMjVDNiAxMS4zMSA3LjU1IDEzIDkgMTNoNGMxLjQ1IDAgMy0xLjY5IDMtMy41UzE0LjUgNiAxMyA2elxcXCI+PC9wYXRoPjwvc3ZnPjwvYT5IaWphIGEgcGFkcmU8L2gzPlxcbjx0YWJsZT5cXG48dGhlYWQ+XFxuPHRyPlxcbjx0aD5UaXBvPC90aD5cXG48dGg+SW1wbGVtZW50YWNpw7NuPC90aD5cXG48L3RyPlxcbjwvdGhlYWQ+XFxuPHRib2R5Plxcbjx0cj5cXG48dGQ+SGVyZW5jaWEgc2ltcGxlLCBzaW4gaW50ZXJmYWNlczwvdGQ+XFxuPHRkPlV0aWxpemFyIDxjb2RlPnN1cGVyPC9jb2RlPjwvdGQ+XFxuPC90cj5cXG48dHI+XFxuPHRkPkhlcmVuY2lhIG11bHRpcGxlIG8gY29uIGludGVyZmFjZXM8L3RkPlxcbjx0ZD5TZSBpbXBsZW1lbnRhbiBsYXMgaW50ZXJmYWNlcyBjb21vIGNhbXBvcywgc2UgZGV2dWVsdmUgbGEgaW50ZXJmYXogYSBsYSBxdWUgc2UgbmVjZXNpdGUgaGFjZXIgY2FzdGluZzwvdGQ+XFxuPC90cj5cXG48L3Rib2R5PlxcbjwvdGFibGU+XFxuPGgzIGlkPVxcXCJwYWRyZS1hLWhpamFcXFwiPjxhIGlkPVxcXCJ1c2VyLWNvbnRlbnQtcGFkcmUtYS1oaWphXFxcIiBjbGFzcz1cXFwiYW5jaG9yXFxcIiBocmVmPVxcXCIjcGFkcmUtYS1oaWphXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PHN2ZyBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCIgY2xhc3M9XFxcIm9jdGljb24gb2N0aWNvbi1saW5rXFxcIiBoZWlnaHQ9XFxcIjE2XFxcIiB2ZXJzaW9uPVxcXCIxLjFcXFwiIHZpZXdib3g9XFxcIjAgMCAxNiAxNlxcXCIgd2lkdGg9XFxcIjE2XFxcIj48cGF0aCBkPVxcXCJNNCA5aDF2MUg0Yy0xLjUgMC0zLTEuNjktMy0zLjVTMi41NSAzIDQgM2g0YzEuNDUgMCAzIDEuNjkgMyAzLjUgMCAxLjQxLS45MSAyLjcyLTIgMy4yNVY4LjU5Yy41OC0uNDUgMS0xLjI3IDEtMi4wOUMxMCA1LjIyIDguOTggNCA4IDRINGMtLjk4IDAtMiAxLjIyLTIgMi41UzMgOSA0IDl6bTktM2gtMXYxaDFjMSAwIDIgMS4yMiAyIDIuNVMxMy45OCAxMiAxMyAxMkg5Yy0uOTggMC0yLTEuMjItMi0yLjUgMC0uODMuNDItMS42NCAxLTIuMDlWNi4yNWMtMS4wOS41My0yIDEuODQtMiAzLjI1QzYgMTEuMzEgNy41NSAxMyA5IDEzaDRjMS40NSAwIDMtMS42OSAzLTMuNVMxNC41IDYgMTMgNnpcXFwiPjwvcGF0aD48L3N2Zz48L2E+UGFkcmUgYSBoaWphPC9oMz5cXG48YmxvY2txdW90ZT5cXG48cD5TZSByZWNvbWllbmRhIHRlbmVyIHVuIGNhbXBvIGRvbmRlIHZlcmlmaXF1ZXMgbGEgY2xhc2UgYSBsYSBxdWUgcGVydGVuZWNlIGVsIG9iamV0b1xcbnkgdmVyaWZpcXVlcyBzaSBlbCBjYXN0aW5nIGVzIHbDoWxpZG8gZW4gdGllbXBvIGRlIGVqZWN1Y2nDs248L3A+XFxuPC9ibG9ja3F1b3RlPlxcbjx0YWJsZT5cXG48dGhlYWQ+XFxuPHRyPlxcbjx0aD5UaXBvPC90aD5cXG48dGg+SW1wbGVtZW50YWNpw7NuPC90aD5cXG48L3RyPlxcbjwvdGhlYWQ+XFxuPHRib2R5Plxcbjx0cj5cXG48dGQ+SGVyZW5jaWEgc2ltcGxlLCBzaW4gaW50ZXJmYWNlczwvdGQ+XFxuPHRkPkhhY2VyIGNhc3RpbmcgZGUgPGNvZGU+c3VwZXI8L2NvZGU+IGEgdW4gb2JqZXRvIGRlbCB0aXBvIGRlIGxhIGNsYXNlIGhpamE8L3RkPlxcbjwvdHI+XFxuPC90Ym9keT5cXG48L3RhYmxlPlxcbjxwPlBhcmEgaGVyZW5jaWEgbXVsdGlwbGUgbyBtdWx0aXBsZXMgaW50ZXJmYWNlcyBzZSBuZWNlc2l0YSBzYWJlciBlbCBsYXlvdXQgZW0gbWVtb3JpYSBkZWwgb2JqZXRvIGVuIGN1ZXN0acOzbixcXG5wb3IgZWplbXBsbywgc2kgPGNvZGU+c3VwZXI8L2NvZGU+IHRpZW5lIHVuIG9mZnNldCBkZSAweDAwIGVuIGxhIGNsYXNlIGhpamEsIGVudG9uY2VzIGJhc3RhXFxuY29uIHVuIGNhc3RpbmcsIHBvciBlbCBjb250cmFyaW8sIHNpIGVsIG9mZnNldCBlcyBkaWZlcmVudGUgZGUgMHgwMCwgdGVuZW1vcyBxdWVcXG5tb3Zlcm5vcyBhbCBwcmluY2lwaW8geSBhcXXDrSB5YSBoYWNlciBjYXN0aW5nIChlc3RvIGVzIHBlbGlncm9zbywgc2UgdXRpbGl6YVxcbmFyaXRtw6l0aWNhIGRlIGFwdW50YWRvcmVzKSwgcG9yIGVqZW1wbG8sIGltYWdpbmVtb3MgZXN0bzo8L3A+XFxuPGJsb2NrcXVvdGU+XFxuICAgIDxpIGNsYXNzPVxcXCJ2LWljb24gbWRpIG1kaS1hbGVydFxcXCIgc3R5bGU9XFxcImNvbG9yOiB5ZWxsb3c7IGZvbnQtc2l6ZTogMmVtXFxcIj48L2k+IEVzdG8gZXMgVW5kZWZpbmVkIEJlaGF2aW9yXFxuICAgIDxicj5cXG48L2Jsb2NrcXVvdGU+XFxuPHByZSBjbGFzcz1cXFwibGFuZ3VhZ2UtY1xcXCI+PGNvZGUgY2xhc3M9XFxcImxhbmd1YWdlLWNcXFwiPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBrZXl3b3JkXFxcIj50eXBlZGVmPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+c3RydWN0PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY2xhc3MtbmFtZVxcXCI+Q2hpbGQ8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj57PC9zcGFuPlxcbiAgICBTdXBlcjEgc3VwZXIxPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbiAgICBTdXBlcjIgc3VwZXIyPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+fTwvc3Bhbj5DaGlsZDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG5cXG48c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+dm9pZDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGZ1bmN0aW9uXFxcIj5mPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj57PC9zcGFuPlxcbiAgICBDaGlsZCBjPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbiAgICBTdXBlcjEgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPnMxIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+PTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPlN1cGVyMTxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+Kjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+JmFtcDs8L3NwYW4+YzxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ljwvc3Bhbj5zdXBlcjE8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbiAgICBTdXBlcjIgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPnMyIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+PTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPlN1cGVyMjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+Kjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+JmFtcDs8L3NwYW4+YzxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ljwvc3Bhbj5zdXBlcjI8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj47PC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidG9rZW4gY29tbWVudFxcXCI+Ly8gVmFtb3MgYSByZWdyZXNhcm5vczwvc3Bhbj5cXG4gICAgQ2hpbGQgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPmMxIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+PTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPkNoaWxkPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj5zMTxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnVuc2lnbmVkPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+Y2hhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPnRlbXAgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj49PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIGtleXdvcmRcXFwiPnZvaWQ8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj5zMjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj5cXG4gICAgQ2hpbGQgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPmMyIDxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBvcGVyYXRvclxcXCI+PTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4oPC9zcGFuPkNoaWxkPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4qPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPig8L3NwYW4+czIgPHNwYW4gY2xhc3M9XFxcInRva2VuIG9wZXJhdG9yXFxcIj4tPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwidG9rZW4ga2V5d29yZFxcXCI+c2l6ZW9mPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+KDwvc3Bhbj5TdXBlcjE8c3BhbiBjbGFzcz1cXFwidG9rZW4gcHVuY3R1YXRpb25cXFwiPik8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj4pPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJ0b2tlbiBwdW5jdHVhdGlvblxcXCI+Ozwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRva2VuIGNvbW1lbnRcXFwiPi8vIHJldHJlY2VkZW1vcyBzaXplb2YgU3VwZXIxIGVzcGFjaW9zIGVuIG1lbW9yaWE8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInRva2VuIHB1bmN0dWF0aW9uXFxcIj59PC9zcGFuPlxcbjwvY29kZT48L3ByZT5cXG48cD5QdWVkZXMgdmVybG8g8J+RiSA8YSBocmVmPVxcXCJodHRwczovL2dvZGJvbHQub3JnL3ovUVFtSkdRXFxcIj5hcXXDrTwvYT4g8J+RiDwvcD5cXG48aDEgaWQ9XFxcImNvbmNsdXNpb25lc1xcXCI+PGEgaWQ9XFxcInVzZXItY29udGVudC1jb25jbHVzaW9uZXNcXFwiIGNsYXNzPVxcXCJhbmNob3JcXFwiIGhyZWY9XFxcIiNjb25jbHVzaW9uZXNcXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIj48c3ZnIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiBjbGFzcz1cXFwib2N0aWNvbiBvY3RpY29uLWxpbmtcXFwiIGhlaWdodD1cXFwiMTZcXFwiIHZlcnNpb249XFxcIjEuMVxcXCIgdmlld2JveD1cXFwiMCAwIDE2IDE2XFxcIiB3aWR0aD1cXFwiMTZcXFwiPjxwYXRoIGQ9XFxcIk00IDloMXYxSDRjLTEuNSAwLTMtMS42OS0zLTMuNVMyLjU1IDMgNCAzaDRjMS40NSAwIDMgMS42OSAzIDMuNSAwIDEuNDEtLjkxIDIuNzItMiAzLjI1VjguNTljLjU4LS40NSAxLTEuMjcgMS0yLjA5QzEwIDUuMjIgOC45OCA0IDggNEg0Yy0uOTggMC0yIDEuMjItMiAyLjVTMyA5IDQgOXptOS0zaC0xdjFoMWMxIDAgMiAxLjIyIDIgMi41UzEzLjk4IDEyIDEzIDEySDljLS45OCAwLTItMS4yMi0yLTIuNSAwLS44My40Mi0xLjY0IDEtMi4wOVY2LjI1Yy0xLjA5LjUzLTIgMS44NC0yIDMuMjVDNiAxMS4zMSA3LjU1IDEzIDkgMTNoNGMxLjQ1IDAgMy0xLjY5IDMtMy41UzE0LjUgNiAxMyA2elxcXCI+PC9wYXRoPjwvc3ZnPjwvYT5Db25jbHVzaW9uZXM8L2gxPlxcbjxwPlJlYWxpemFyIHRvZG8gZXN0ZSBwcm9jZXNvIGVzIG11eSB0YXJkYWRvLCB5LCBwcm9iYWJsZW1lbnRlIGVzIG1lam9yIHF1ZSBubyBsbyBoYWdhcywgc2kgcG9yXFxuYWxndW5hIHJhesOzbiBxdWllcmVzIGNvbnRpbnVhciB1dGlsaXphbmRvIEMgcGVybyBxdWllcmVzIG9yaWVudGFjacOzbiBhIG9iamV0b3MsIGNoZWNhIDxhIGhyZWY9XFxcImh0dHBzOi8vZGV2ZWxvcGVyLmdub21lLm9yZy9nb2JqZWN0L3N0YWJsZS9cXFwiPkdPYmplY3Q8L2E+LCBwcm9iYWJsZW1lbnRlIHNlYSBsbyBxdWUgZXN0YXMgYnVzY2FuZG8uPC9wPlxcbjxwPkZpbmFsbWVudGUsIGVzdGEgbm8gZXMgbGEgw7puaWNhIGZvcm1hIGRlIHJlYWxpemFyIHRvZG8gZXN0bywgwqFoYXkgbXVjaGFzISwgZW4gZXN0ZSBzZW50aWRvXFxuQyBlcyBiYXN0YW50ZSBmbGV4aWJsZSwgcHVlcyBwb2RlbW9zIGhhY2VyIGxvIHF1ZSBxdWVyYW1vcyBkZSBsYSBtYW5lcmEgZW4gcXVlIHF1ZXJhbW9zLjwvcD5cXG5cIixcbiAgICBcbiAgICAgIG1ldGE6IHtcInJlc291cmNlUGF0aFwiOlwiL2hvbWUvcnVubmVyL3dvcmsvYWxhbi1ibG9nL2FsYW4tYmxvZy9jb250ZW50L2Jsb2cvMjAyMC0wNi0yNC1vb3BfYy5tZFwifSxcbiAgICAgfSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///277\n')},278:function(module,exports){eval('\nmodule.exports = { \n      attributes: {"title":"Introducci√≥n al protocolo CAN","year":2020,"month":7,"day":17,"hour":"00:25","excerpt":"El protocolo de comunicaciones CAN (Controller Area Network), un protocolo muy interesante por su versatilidad y sobre todo por todo lo que ofrece, quiz√° deber√≠as considerarlo si te interesa realizar una comunicaci√≥n segura y a prueba de errores","picture":"/images/blog/can/can.png"},\n    \n      html: "<p>El protocolo de comunicaci√≥n CAN (Controller Area Network), un protocolo muy interesante por su versatilidad y sobre todo por todo lo que ofrece, quiz√° deber√≠as considerarlo si te interesa realizar una comunicaci√≥n segura y a prueba de errores</p>\\n<h1 id=\\"contenido\\"><a id=\\"user-content-contenido\\" class=\\"anchor\\" href=\\"#contenido\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Contenido</h1>\\n<ol>\\n<li><a href=\\"#que-es\\">ü§î¬øQu√© es?</a></li>\\n<li><a href=\\"#can-estandar-y-extendido\\">CAN est√°ndar y CAN extendido</a>\\n<ol>\\n<li><a href=\\"#can-estandar\\">Est√°ndar</a></li>\\n<li><a href=\\"#can-extendido\\">Extendido</a></li>\\n</ol>\\n</li>\\n<li><a href=\\"#mensajes\\">Mensajes</a>\\n<ol>\\n<li><a href=\\"#arbitraje\\">Arbitraje</a></li>\\n<li><a href=\\"#tipos-de-mensajes\\">Tipos</a></li>\\n</ol>\\n</li>\\n<li><a href=\\"#fin\\">Fin</a></li>\\n</ol>\\n<br>\\n<h1 id=\\"que-es\\"><a id=\\"user-content-¬øqu√©-es\\" class=\\"anchor\\" href=\\"#¬øqu√©-es\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>¬øQu√© es?</h1>\\n<p>CAN es un protocolo desarrollado por Bosch, pensado para ser utilizado en automoviles, es un protocolo serial y desarrollado\\npara reemplazar otros protocolos, de la misma forma, por especificaci√≥n es altamente inmune a interferencias electricas,\\nde autodiagonsticarse y reparar algunos datos con errores. Debido a todo esto, ha crecido su popularidad, siendo utilizado\\ntambi√©n en entornos m√©dicos, manufactura, aviaci√≥n, trenes, entre otros sectores.</p>\\n<p>El estandar se adhiere al modelo OSI, quedando de esta manera</p>\\n<table>\\n<thead>\\n<tr>\\n<th>OSI</th>\\n<th>CAN</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Aplicaci√≥n</td>\\n<td>Microcontroladores o DSP</td>\\n</tr>\\n<tr>\\n<td>Enlace de datos</td>\\n<td>Controlador CAN</td>\\n</tr>\\n<tr>\\n<td>Capa f√≠sica</td>\\n<td>Controlador CAN y <em>transceiver</em> CAN</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Actualmente esta estandarizado bajo la <a href=\\"https://www.iso.org/standard/63648.html\\">ISO</a>, adem√°s, es f√°cil encontrar\\nmicrocontroladores y placas de desarrollo con controladores CAN integrados, algunas empresas que brindan dispositivos con CAN:</p>\\n<ul>\\n<li>STMicroelectronics</li>\\n<li>NXP</li>\\n<li>Microchip</li>\\n<li>Espressif</li>\\n<li>Texas Instruments</li>\\n</ul>\\n<p>CAN no define ning√∫n tipo de conector para el bus CAN</p>\\n<h1 id=\\"can-estandar-y-extendido\\"><a id=\\"user-content-can-est√°ndar-y-extendido\\" class=\\"anchor\\" href=\\"#can-est√°ndar-y-extendido\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>CAN est√°ndar y extendido</h1>\\n<p>Se definen dos modos de operaci√≥n para CAN, est√°ndar y extendido, a continuaci√≥n veremos de que trata cada uno.</p>\\n<h2 id=\\"can-estandar\\"><a id=\\"user-content-can-est√°ndar\\" class=\\"anchor\\" href=\\"#can-est√°ndar\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>CAN est√°ndar</h2>\\n<p>Una trama en CAN est√°ndar tiene la siguiente forma</p>\\n<div style=\\"overflow-x: auto\\">\\n<table>\\n<thead>\\n<tr>\\n<th>SOF</th>\\n<th>Identificador</th>\\n<th>RTR</th>\\n<th>IDE</th>\\n<th>r0</th>\\n<th>DLC</th>\\n<th>datos</th>\\n<th>CRC</th>\\n<th>ACK</th>\\n<th>EOF</th>\\n<th>IFS</th>\\n</tr>\\n</thead>\\n<tbody></tbody>\\n</table>\\n</div>\\n<p>Cada uno de estos campos consta de 1 bit a menos que se indique lo contrario.</p>\\n<ul>\\n<li>SOF (Start Of Frame): es dominante e indica el inicio de la trama</li>\\n<li>Identificador: 11 bits, establece la prioridad del mensaje, los mensajes con m√°s prioridad tienen valores m√°s bajos, por ejemplo, el id &quot;0&quot; es el de mayor prioridad.</li>\\n<li>RTR (Remote Transmission Request): este bit es dominante cuando se solicita informaci√≥n de otro nodo.</li>\\n<li>IDE (Identifier Extension): es un bit dominante para indicar que es CAN est√°ndar, es recesivo para indicar que es CAN extendido.</li>\\n<li>r0 (reserved): bit reservado</li>\\n<li>DLC (Data Length Code): 4 bits que indican la cantidad de bytes que se transmitir√°n</li>\\n<li>Data: hasta 64 bits, son los datos que se desean transmitir.</li>\\n<li>CRC (Cyclic Redundancy Check): 16 bits (15 y un delimitador), esta parte contiene el checksum y se utiliza para detectar errores.</li>\\n<li>ACK (Acknowledgment): 2 bits, uno es el ACK y otro es un delimitador, cada nodo que reciba un mensaje correcto, sobreescribe este bit, inicialmente recesivo por un bit dominante.</li>\\n<li>EOF (End Of Frame): 7 bits, marca el fin de la trama CAN, tiene fines de verificaci√≥n de errores.</li>\\n<li>IFS (Interframe Space): contiene el tiempo requerido por un controlador para mover una trama correcta a un buffer de mensajes (para la aplicaci√≥n).</li>\\n</ul>\\n<h2 id=\\"can-extendido\\"><a id=\\"user-content-can-extendido\\" class=\\"anchor\\" href=\\"#can-extendido\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>CAN extendido</h2>\\n<p>Una trama CAN tiene la siguiente forma.</p>\\n<div style=\\"overflow-x: auto\\">\\n<table>\\n<thead>\\n<tr>\\n<th>SOF</th>\\n<th>Identificador</th>\\n<th>SRR</th>\\n<th>IDE</th>\\n<th>Identificador</th>\\n<th>r1</th>\\n<th>r0</th>\\n<th>DLC</th>\\n<th>Data</th>\\n<th>CRC</th>\\n<th>ACK</th>\\n<th>EOF</th>\\n<th>IFS</th>\\n</tr>\\n</thead>\\n<tbody></tbody>\\n</table>\\n</div>\\n<p>Los bits son los mismos, salvo:</p>\\n<ul>\\n<li>SRR (Substitute Remote Request): es un placeholder.</li>\\n<li>IDE: ahora es recesivo para indicar que los siguientes 18 bits bits forman parte del identificador.</li>\\n<li>r1: un bit m√°s reservado</li>\\n</ul>\\n<h1 id=\\"mensajes\\"><a id=\\"user-content-mensajes\\" class=\\"anchor\\" href=\\"#mensajes\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Mensajes</h1>\\n<h2 id=\\"arbitraje\\"><a id=\\"user-content-arbitraje\\" class=\\"anchor\\" href=\\"#arbitraje\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Arbitraje</h2>\\n<p>Una caracter√≠stica muy importante de CAN es que cuenta con dos se√±ales para la transmisi√≥n de datos: CAN H y CAN L, emiten el mismo\\nmensaje pero con l√≥gica opuesta, la raz√≥n de esto es garantizar m√°s seguridad y tolerancia a fallos.</p>\\n<p>Puesto que es un bus de nodos y no hay un orden espec√≠fico para enviar mensajes, ocurre algo llamado arbitraje, en la\\nque los mensajes de mayor prioridad ocurren antes que los de menor prioridad.</p>\\n<h2 id=\\"tipos-de-mensajes\\"><a id=\\"user-content-tipos-de-mensajes\\" class=\\"anchor\\" href=\\"#tipos-de-mensajes\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Tipos de mensajes</h2>\\n<p>En CAN hay 4 tipos de mensajes:</p>\\n<ul>\\n<li>Data Frame: es el mensaje m√°s com√∫n, tal cual su nombre dice, es para transmitir datos.</li>\\n<li>Remote Frame: sirve para solicitar datos de otro nodo, los espec√≠fica el bit RTR</li>\\n<li>Error Frame: es una trama que no cumple con lo especificado por CAN, si se env√≠a una trama de error, todos los dem√°s nodos enviar√°n una trama de error, la raz√≥n de esto es para que el nodo que envi√≥ el mensaje se entere de su error.</li>\\n<li>Valid Frame: una trama es libre de errores si el √∫ltimo bit de EOF es recibido.</li>\\n</ul>\\n<h1 id=\\"fin\\"><a id=\\"user-content-fin\\" class=\\"anchor\\" href=\\"#fin\\" aria-hidden=\\"true\\"><svg aria-hidden=\\"true\\" class=\\"octicon octicon-link\\" height=\\"16\\" version=\\"1.1\\" viewbox=\\"0 0 16 16\\" width=\\"16\\"><path d=\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"></path></svg></a>Fin</h1>\\n<p>Aunque quedaron muchas cosas sin explicar, espero que haya servido como una peque√±a introducci√≥n al protocolo CAN.</p>\\n<p>Es un protocolo muy interesante que deber√≠as considerar si necesitas algo confiable o piensas utilizarlo en un sector como la automatizaci√≥n.</p>\\n",\n    \n      meta: {"resourcePath":"/home/runner/work/alan-blog/alan-blog/content/blog/2020-07-14-can.md"},\n     }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///278\n')}}]);