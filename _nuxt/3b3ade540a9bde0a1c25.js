(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{267:function(module,exports){eval('\nmodule.exports = { \n      attributes: {"title":"ProgramaciÃ³n orientada a objetos en C","year":2020,"month":7,"day":2,"hour":"00:25","excerpt":"Â¿QuÃ©?, Â¿programaciÃ³n orientada a objetos en C?, Â¿es esto posible?, la respuesta es Â¡sÃ­, si es posible!, y no es tan complicado como suena, pero requiere de trabajo manual ðŸ’ª, entonces, repasemos lo que es la programaciÃ³n orientada a objetos","picture":"/images/blog/oop_c/header.png"},\n    \n      html: "<p>El fin de este artÃ­culo es informativo, probablemente <em>no</em> deberÃ­as hacer esto, es tardado y en\\nC es mejor hacer las cosas de otra forma</p>\\n<p>Â¿QuÃ©?, Â¿programaciÃ³n orientada a objetos en C?, Â¿es esto posible?, la respuesta es Â¡sÃ­, si es posible!, y no es tan complicado como suena, pero requiere de trabajo manual ðŸ’ª, entonces, repasemos lo que es la programaciÃ³n orientada a objetos</p>\\n<blockquote>\\n<p>Es un paradigma de programaciÃ³n basado en el concepto de &quot;objetos&quot;, que contienen datos en la forma de campos (conocidos como atributos o propiedades) y cÃ³digo\\nen la forma de procedimientos (llamados mÃ©todos)</p>\\n</blockquote>\\n<p style=\\"font-size: 0.7em; text-align: right\\">Tomado de <a href=\\"https://en.wikipedia.org/wiki/Object-oriented_programming#cite_note-1\\">Wikipedia</a></p>\\n<p>Ok, pero Â¿cÃ³mo uso la OOP en C?</p>\\n<p>Antes de empezar, hay muchas formas de hacer esto, en general todas comparten ciertas similitudes, por lo que esta solo es una forma de hacerlo</p>\\n<p>Entonces, Â¡comencemos!</p>\\n<h1>Clases</h1>\\n<p>Â¿QuÃ© serÃ­a de un lenguaje orientado a objetos si no tuviera clases?, por eso es lo primero que debemos pensar en implementar.\\nDe hecho, no es difÃ­cil implementar esto.</p>\\n<p>Primero, veamos cÃ³mo se crea una clase en C++:</p>\\n<pre class=\\"language-cpp\\"><code class=\\"language-cpp\\"><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Clase</span> <span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">public</span><span class=\\"token operator\\">|</span><span class=\\"token keyword\\">protected</span><span class=\\"token operator\\">|</span><span class=\\"token keyword\\">private</span><span class=\\"token punctuation\\">]</span> Clase1<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">public</span><span class=\\"token operator\\">|</span><span class=\\"token keyword\\">protected</span><span class=\\"token operator\\">|</span><span class=\\"token keyword\\">private</span><span class=\\"token punctuation\\">]</span> Clase2<span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">public</span><span class=\\"token operator\\">|</span><span class=\\"token keyword\\">protected</span><span class=\\"token operator\\">|</span><span class=\\"token keyword\\">private</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre>\\n<blockquote>\\n<p>class y struct en C++ son lo mismo, solo difieren por el tipo de acceso por defecto siendo public en struct y private en class</p>\\n</blockquote>\\n<p>En C solo tenemos las <code>struct</code>, pero con ellas podemos hacer todo, excepto propiedades privadas y protegidas, Â¿o no?, Â¡si podemos tener propiedades privadas!,\\nhay muchas formas de hacer esto, algunas que no son tan privadas (por ejemplo, tener un prefijo para indicar que son privadas) o utilizar una estructura que implemente\\neso y solo pueda ser accedida desde un lugar privado ðŸ™€.</p>\\n<p>Para esto se requiere de una estructura que sirva para almacenar las variables privadas y que no pueda ser utilizada en el contexto <em>pÃºblico</em>,\\npara ello vamos a recurrir a utilizar una <em>forward declaration</em> de esta estructura.</p>\\n<blockquote>\\n<p><em>Forward declaration</em> se refiere a declarar un identificador (tipo, variable, constante, funciÃ³n) a la que todavÃ­a no se le ha dado una definiciÃ³n completa</p>\\n</blockquote>\\n<p>Entonces, imaginemos que nuestra clase se llama <code>MyClass</code>, entonces podrÃ­amos llamar a nuestra implementaciÃ³n de las variables privadas\\n<code>MyClassPrivate</code>, por lo que quedarÃ­a de esta forma:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token comment\\">// .h</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClassPrivate</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClass</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// El compilador necesita saber el tamaÃ±o, en este caso el tamaÃ±o de un apuntador</span>\\n    <span class=\\"token comment\\">// Si no es un apuntador, el compilador no sabe el tamaÃ±o y pues no nos dejarÃ¡ compilar</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClassPrivate</span> <span class=\\"token operator\\">*</span>private<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// .c</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClassPrivate</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> c<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> MyClassPrivate<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// obj->private solo puede ser accedido en este archivo* (hay maneras de saltarse esto, pero no las mencionarÃ© aquÃ­)</span>\\n</code></pre>\\n<h1>Constructores y destructores</h1>\\n<blockquote>\\n<p>Un constructor es un mÃ©todo que se encarga de inicializar un objeto de cierta clase.</p>\\n</blockquote>\\n<p>Los constructores son una de las partes mÃ¡s importantes, pues permiten la inicializaciÃ³n de los objetos a un estado\\nen el que sea conveniente para el programa, por ejemplo, imaginemos una clase llamada &quot;TcpConnection&quot; y un constructor que tome\\nuna direcciÃ³n ip y un puerto para conectarse, aquÃ­ se puede establecer esa parte de inicializar la conexiÃ³n a un estado en el\\nque realmente estÃ© conectado a &quot;ip:puerto&quot;.</p>\\n<p>En C++ contamos con distintos tipos de ctor, todos tienen la tarea de inicializar un objeto de una clase especÃ­fica.</p>\\n<ul>\\n<li><code>Class::Class()</code> -&gt; constructor vacÃ­o</li>\\n<li><code>Class:Class(const Class &amp;obj)</code> -&gt; constructor copia</li>\\n<li><code>Class::Class(Class &amp;&amp;obj)</code> -&gt; constructor de movimiento</li>\\n<li><code>Class::Class(params...)</code> -&gt; constructor con parÃ¡metros</li>\\n</ul>\\n<p>Dicho esto, Â¿cÃ³mo utilizamos constructores en C?</p>\\n<p>Puesto que en C solo tenemos funciones, tenemos que recurrir a ellas para inicializar nuestras instancias,\\nuna forma de hacer esto es de la siguiente manera:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Hey</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> Hey<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Hey_ctor</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// y para usarla</span>\\nHey hey<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token function\\">Hey_ctor</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre>\\n<p>Sencillo, Â¿no?, los demÃ¡s constructores pueden ser implementador de la misma manera, solo basta con mandarle los parÃ¡metros que necesitemos,\\npor ejemplo, un constructor que reciba un int serÃ­a asÃ­:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token comment\\">// puesto que en C no existe la sobrecarga de funciones, podemos extender el nombre del ctor con los parametros que reciba</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Hey_ctor_i</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> param<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre>\\n<p>Oye, Â¿y un destructor? ðŸ’¥</p>\\n<p>Â¡Pues de la misma manera!, implementamos una funciÃ³n que se encargue de realizar esta funciÃ³n, veamos el siguiente ejemplo:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Hey_dtor</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// y para usarlo</span>\\nHey hey<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token function\\">Hey_ctor</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>hey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// usamos el objeto</span>\\n<span class=\\"token function\\">Hey_dtor</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>hey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// y llamamos al dtor</span>\\n</code></pre>\\n<p>Â¡Veamos un ejemplo donde apliquemos clases, ctors y dtor!</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token comment\\">// Class.h</span>\\n<span class=\\"token comment\\">// Forward declare de la estructura para los campos privados</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClassPrivate</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// Creamos la clase</span>\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClass</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// variables privadas</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClassPrivate</span> <span class=\\"token operator\\">*</span>private_members<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// variables publicas</span>\\n    <span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> MyClass<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// Ctor</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">MyClass_ctor</span><span class=\\"token punctuation\\">(</span>MyClass <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> c<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// MÃ©todo get_c</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">MyClass_get_c</span><span class=\\"token punctuation\\">(</span>MyClass <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// dtor</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">MyClass_dtor</span><span class=\\"token punctuation\\">(</span>MyClass <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// Class.c</span>\\n<span class=\\"token macro property\\">#<span class=\\"token directive property\\">include</span> <span class=\\"token string property\\">\\"class.H\\"</span></span>\\n<span class=\\"token macro property\\">#<span class=\\"token directive property\\">include</span> <span class=\\"token string property\\">&lt;stdlib.h></span></span>\\n\\n<span class=\\"token comment\\">// Definimos la estructura de la que anteriormente hicimos un forward declaration</span>\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyClassPrivate</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// esta variable es privada :D</span>\\n    <span class=\\"token keyword\\">int</span> c<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// esta tambiÃ©n</span>\\n<span class=\\"token punctuation\\">}</span> MyClassPrivate<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// Implementamos el ctor</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">MyClass_ctor</span><span class=\\"token punctuation\\">(</span>MyClass <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> c<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// Inicializamos las variables</span>\\n    self<span class=\\"token operator\\">-></span>a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    self<span class=\\"token operator\\">-></span>private_members<span class=\\"token operator\\">-></span>b <span class=\\"token operator\\">=</span> b<span class=\\"token punctuation\\">;</span>\\n    self<span class=\\"token operator\\">-></span>private_members<span class=\\"token operator\\">-></span>c <span class=\\"token operator\\">=</span> c<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// Alojamos memoria</span>\\n    self<span class=\\"token operator\\">-></span>private_members <span class=\\"token operator\\">=</span> <span class=\\"token function\\">malloc</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>MyClassPrivate<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// MÃ©todo get_c</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">MyClass_get_c</span><span class=\\"token punctuation\\">(</span>MyClass <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> self<span class=\\"token operator\\">-></span>private_members<span class=\\"token operator\\">-></span>c<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// Dtor</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">MyClass_dtor</span><span class=\\"token punctuation\\">(</span>MyClass <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// limpiamos los recursos que haya utilizado MyClass</span>\\n    <span class=\\"token function\\">free</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token operator\\">-></span>private_members<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// main.c</span>\\n<span class=\\"token macro property\\">#<span class=\\"token directive property\\">include</span> <span class=\\"token string property\\">\\"class.h\\"</span></span>\\n<span class=\\"token macro property\\">#<span class=\\"token directive property\\">include</span> <span class=\\"token string property\\">&lt;stdio.h></span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// Creamos una instancia de la clase MyClass e invocamos al ctor</span>\\n    MyClass object<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">MyClass_ctor</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>object<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">25</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">int</span> tmp <span class=\\"token operator\\">=</span> object<span class=\\"token punctuation\\">.</span>private_members<span class=\\"token operator\\">-></span>b<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// oops, error, tipo incompleto</span>\\n    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"C vale: %d\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">MyClass_get_c</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>object<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token function\\">MyClass_dtor</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>object<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre>\\n<p>Como se puede ver, no es tan complicado realizar esto, quizÃ¡ un poco repetitivo, sin embargo, hay una cuestiÃ³n, espero que la hayas notado ;).</p>\\n<p>Â¡<strong>Malloc</strong> solo para implementar variables privadas! ðŸ˜±</p>\\n<p>Calma, que se puede implementar de otra forma, podemos tener un buffer local de memoria del tamaÃ±o que necesitemos para\\nlas variables privadas, o confiar y utilizar una convenciÃ³n para las variables privadas (personalmente creo que esto Ãºltimo es lo mejor).</p>\\n<h1>Herencia</h1>\\n<blockquote>\\n<p>Es un mecanismo para permitir que una clase X se base en otra clase Y, estableciendo una relaciÃ³n &quot;X es subclase de Y&quot;</p>\\n</blockquote>\\n<blockquote>\\n    <i class=\\"v-icon mdi mdi-alert\\" style=\\"color: yellow; font-size: 2em\\"></i> OpiniÃ³n \\n   <br>\\n    <p>No soy partidario de abusar de la herencia, pues creo que puede dar lugar a cÃ³digo muy complejo y difÃ­cil de mantener</p>\\n</blockquote>\\n<p>La herencia consiste en crear nuevas clases que partan de clases ya existentes, de manera que tienen todas las propiedades y mÃ©todos de la clase padre; implementar\\nesto en C tampoco supone dificultad alguna, aunque siendo estrictos, lo implementamos utilizando la composiciÃ³n.</p>\\n<pre class=\\"language-cpp\\"><code class=\\"language-cpp\\"><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Object</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> y<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">2dBox</span> <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">public</span> Object\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> width<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> height<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre>\\n<p>En C esto se traduce en:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> y<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> Object<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">2dBox</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Object super<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// clase base</span>\\n    <span class=\\"token keyword\\">int</span> width<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> height<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> <span class=\\"token number\\">2</span>dBox<span class=\\"token punctuation\\">;</span>\\n</code></pre>\\n<p>Â¿CÃ³mo se ve la estructura <code>2dBox</code> en memoria?, pues de la siguiente manera (sin contar padding, alignment ni tamaÃ±o de los tipos de dato).</p>\\n<p><img src=\\"/images/blog/oop_c/mem_layout.png\\" alt=\\"Layout en memoria\\"></p>\\n<p>Con la imagen anterior podemos observar que las propiedades de la clase Object van antes que cualquier propiedad de la clase 2dBox, bien podrÃ­amos ponerla en cualquier orden,\\npero por cuestiÃ³n de estÃ©tica las pondremos al principio.</p>\\n<p>Hasta aquÃ­ todo bien, asÃ­ que la herencia se puede resumir de la siguiente manera.</p>\\n<blockquote>\\n<p>Para heredar de otras clases tenemos que recurrir a la composiciÃ³n</p>\\n</blockquote>\\n<p>AÃºn hay un aspecto que no hemos tocado, Â¡la sobrecarga de mÃ©todos y los dtor virtuales!</p>\\n<h1>Polimorfismo</h1>\\n<p>Antes de entrar a esto, voy a explicar que son los apuntadores a funcions, como declarar uno y como usarlos, posteriormente explicarÃ© lo que es una vtable.</p>\\n<h3>Apuntadores a funciones</h3>\\n<p>Los apuntadores a funciones (function pointers) son un tipo especial de apuntadores que tienen la caracterÃ­stica de apuntar\\na una funciÃ³n y para llamar a la funciÃ³n a la que apuntan, los usamos como si fuera una funciÃ³n.</p>\\n<p>La sintaxis para declarar un apuntador a funciÃ³n es la siguiente (lo se, es fea).</p>\\n<pre><code>[tipo de retorno] (*nombre de la variable)(parametros...);\\n</code></pre>\\n<p>Y un uso de estos serÃ­a el siguiente:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token macro property\\">#<span class=\\"token directive property\\">include</span> <span class=\\"token string property\\">&lt;stdio.h></span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">square</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> param<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> param <span class=\\"token operator\\">*</span> param<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>my_func_ptr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> square<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// lo asignamos a la funciÃ³n</span>\\n    <span class=\\"token comment\\">// tambiÃ©n podemos asignarlo aquÃ­ de la siguiente manera:</span>\\n    <span class=\\"token comment\\">// my_func_ptr = &amp;square;</span>\\n\\n    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">my_func_ptr</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">8</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre>\\n<p>Lo bueno es que podemos utilizar typedefs para hacerlos mÃ¡s bonitos c:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token macro property\\">#<span class=\\"token directive property\\">include</span> <span class=\\"token string property\\">&lt;math.h></span></span>\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">double</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>FuncPtr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">double</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    FuncPtr fptr <span class=\\"token operator\\">=</span> sin<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Ya no esta feo :D</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre>\\n<p>Los apuntadores a funciones son muy Ãºtiles cuando se desean implementar callbacks o personalizar el comportamiento de una funciÃ³n (por ejemplo, <a href=\\"https://en.cppreference.com/w/c/algorithm/qsort\\">qsort</a>).</p>\\n<h3>Virtual method table</h3>\\n<p>TambiÃ©n llamada vtable, es una forma de permitir las funciones virtuales (<em>dynamic dispatch</em>), es muy utilizada en muchos lenguajes,\\nde manera sencilla, consiste en una tabla que contiene apuntadores a los mÃ©todos que se deben llamar para determinada instancia, de esta manera\\nse sabe cuÃ¡l funciÃ³n virtual llamar.</p>\\n<p>Es importante mencionar que una vtable <em>es la misma</em> para objetos del mismo tipo, por lo que se puede compartir entre todas las instancias de determinada clase.</p>\\n<p>Un ejemplo de vtable para la siguiente clase (C++):</p>\\n<pre class=\\"language-cpp\\"><code class=\\"language-cpp\\">\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Hey</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">virtual</span> <span class=\\"token operator\\">~</span><span class=\\"token function\\">Hey</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">foo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">hey</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n</code></pre>\\n<table>\\n<thead>\\n<tr>\\n<th>MÃ©todo</th>\\n<th>FunciÃ³n que realiza ese proceso</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Hey_dtor</td>\\n<td>0x123EDFAA</td>\\n</tr>\\n<tr>\\n<td>Hey_foo</td>\\n<td>0x00000000</td>\\n</tr>\\n<tr>\\n<td>Hey_hey</td>\\n<td>0x00000000</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Nota: la funciÃ³n es la direcciÃ³n de la funciÃ³n que realizarÃ¡ ese proceso, puesto que no tienen implementaciÃ³n (a excepciÃ³n del dtor) entonces no deben apuntar a una direcciÃ³n vÃ¡lida.</p>\\n<p>Ahora veamos a la siguiente clase</p>\\n<pre class=\\"language-cpp\\"><code class=\\"language-cpp\\"><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Foo</span> <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">public</span> Hey\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">virtual</span> <span class=\\"token operator\\">~</span><span class=\\"token function\\">Foo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">foo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> override<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">hey</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> override<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre>\\n<p>Su vtable serÃ­a la siguiente (direcciones de memoria solo para demostraciÃ³n, no reflejan direcciones reales):</p>\\n<table>\\n<thead>\\n<tr>\\n<th>MÃ©todo</th>\\n<th>FunciÃ³n que realiza ese proceso</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Foo_dtor</td>\\n<td>0x123EDFAA</td>\\n</tr>\\n<tr>\\n<td>Foo_foo</td>\\n<td>0xAFE23400</td>\\n</tr>\\n<tr>\\n<td>Foo_hey</td>\\n<td>0xFF23400E</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Puesto que esta clase ya implementa todos los mÃ©todos, entonces ya apuntan a direcciones vÃ¡lidas (que sean funciones).</p>\\n<p>Va va, pero Â¿cÃ³mo implemento <strong>esto</strong> en C?</p>\\n<p>Â¿Recuerdas lo de apuntadores a funciones?, pues los vamos a utilizar.</p>\\n<p>Introduciremos una estructura que cumpla con ese proposito:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Hey_Vtable</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>Class_dtor<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>Hey_foo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>Hey_hey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> Hey_Vtable<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Hey</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Hey_Vtable <span class=\\"token operator\\">*</span>vtable<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> Hey<span class=\\"token punctuation\\">;</span>\\n</code></pre>\\n<p>Â¿Debemos implementar una estructura similar para Foo?, no, <strong>a menos</strong> que esta clase tenga mÃ¡s funciones virtuales, o utilizar <a href=\\"https://en.wikipedia.org/wiki/Type_punning\\"><em>type punning</em></a>.</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\">\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Hey_dtor</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Hey_ctor</span><span class=\\"token punctuation\\">(</span>Hey <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">static</span> Hey_Vtable <span class=\\"token keyword\\">const</span> vtbl <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n        Hey_dtor<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// destructor</span>\\n        <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// foo</span>\\n        <span class=\\"token constant\\">NULL</span> <span class=\\"token comment\\">// hey</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    self<span class=\\"token operator\\">-></span>vtable <span class=\\"token operator\\">=</span> vtbl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre>\\n<p>Â¡Genial!, ya podemos invocar al dtor de la siguiente manera: <code>hey.vtable-&gt;Class_dtor(&amp;hey)</code>.</p>\\n<p>Ahora, realicemos la implementaciÃ³n para Foo:</p>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Foo</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Hey base<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> Foo<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Foo_dtor</span><span class=\\"token punctuation\\">(</span>Foo <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">Hey_dtor</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token operator\\">-></span>base<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Foo_foo</span><span class=\\"token punctuation\\">(</span>Foo <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Foo_hey</span><span class=\\"token punctuation\\">(</span>Foo <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Foo_ctor</span><span class=\\"token punctuation\\">(</span>Foo <span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">Hey_ctor</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>self<span class=\\"token operator\\">-></span>super<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">static</span> Hey_Vtable <span class=\\"token keyword\\">const</span> vtbl <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n        Foo_dtor<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// destructor</span>\\n        Foo_foo<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// foo</span>\\n        Foo_hey <span class=\\"token comment\\">// hey</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    self<span class=\\"token operator\\">-></span>base<span class=\\"token operator\\">-></span>vtable <span class=\\"token operator\\">=</span> vtbl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre>\\n<p>Y para llamar cualquier mÃ©todo lo hacemos de la misma manera que con el dtor.</p>\\n<p>Hay una cosa que no hemos discutido: el <em>casting</em> de clases hijas a padres y de padres a hijas, a continuaciÃ³n, estÃ¡n las opciones para hacerlo.</p>\\n<h3>Hija a padre</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Tipo</th>\\n<th>ImplementaciÃ³n</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Herencia simple, sin interfaces</td>\\n<td>Utilizar <code>super</code></td>\\n</tr>\\n<tr>\\n<td>Herencia multiple o con interfaces</td>\\n<td>Se implementan las interfaces como campos, se devuelve la interfaz a la que se necesite hacer casting</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3>Padre a hija</h3>\\n<blockquote>\\n<p>Se recomienda tener un campo donde verifiques la clase a la que pertenece el objeto\\ny verifiques si el casting es vÃ¡lido en tiempo de ejecuciÃ³n</p>\\n</blockquote>\\n<table>\\n<thead>\\n<tr>\\n<th>Tipo</th>\\n<th>ImplementaciÃ³n</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Herencia simple, sin interfaces</td>\\n<td>Hacer casting de <code>super</code> a un objeto del tipo de la clase hija</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>Para herencia multiple o multiples interfaces se necesita saber el layout em memoria del objeto en cuestiÃ³n,\\npor ejemplo, si <code>super</code> tiene un offset de 0x00 en la clase hija, entonces basta\\ncon un casting, por el contrario, si el offset es diferente de 0x00, tenemos que\\nmovernos al principio y aquÃ­ ya hacer casting (esto es peligroso, se utiliza\\naritmÃ©tica de apuntadores), por ejemplo, imaginemos esto:</p>\\n<blockquote>\\n    <i class=\\"v-icon mdi mdi-alert\\" style=\\"color: yellow; font-size: 2em\\"></i> Esto es Undefined Behavior\\n    <br>\\n</blockquote>\\n<pre class=\\"language-c\\"><code class=\\"language-c\\"><span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Child</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Super1 super1<span class=\\"token punctuation\\">;</span>\\n    Super2 super2<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>Child<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">f</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    Child c<span class=\\"token punctuation\\">;</span>\\n    Super1 <span class=\\"token operator\\">*</span>s1 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>Super1<span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>c<span class=\\"token punctuation\\">.</span>super1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    Super2 <span class=\\"token operator\\">*</span>s2 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>Super2<span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>c<span class=\\"token punctuation\\">.</span>super2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// Vamos a regresarnos</span>\\n    Child <span class=\\"token operator\\">*</span>c1 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>Child<span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span>s1<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span>temp <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span>s2<span class=\\"token punctuation\\">;</span>\\n    Child <span class=\\"token operator\\">*</span>c2 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>Child<span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span>s2 <span class=\\"token operator\\">-</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>Super1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// retrecedemos sizeof Super1 espacios en memoria</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre>\\n<p>Puedes verlo ðŸ‘‰ <a href=\\"https://godbolt.org/z/QQmJGQ\\">aquÃ­</a> ðŸ‘ˆ</p>\\n<h1>Conclusiones</h1>\\n<p>Realizar todo este proceso es muy tardado, y, probablemente es mejor que no lo hagas, si por\\nalguna razÃ³n quieres continuar utilizando C pero quieres orientaciÃ³n a objetos, checa <a href=\\"https://developer.gnome.org/gobject/stable/\\">GObject</a>, probablemente sea lo que estas buscando.</p>\\n<p>Finalmente, esta no es la Ãºnica forma de realizar todo esto, Â¡hay muchas!, en este sentido\\nC es bastante flexible, pues podemos hacer lo que queramos de la manera en que queramos.</p>\\n",\n    \n      meta: {"resourcePath":"D:\\\\Users\\\\alan2\\\\proyectos\\\\alan-blog\\\\content\\\\blog\\\\2020-06-24-oop_c.md"},\n     }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///267\n')}}]);